{
  "version": 7,
  "timestamp": 1740024129.3609242,
  "files": {
    "C:\\project\\python_project\\Va\\ai\\demo1\\v7\\main.py": {
      "content": "\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u589e\u5f3a\u7248 v4.2\n\u529f\u80fd\uff1a\n1. \u591a\u8bed\u8a00\u52a8\u6001\u751f\u6210\u7684\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u4f53\u9a8c\n2. \u5b8c\u5584\u7684\u6210\u5c31\u7cfb\u7edf\u548c\u8fdb\u5ea6\u8ddf\u8e2a\n3. \u5f02\u6b65\u6587\u5b57\u52a8\u753b\u548c\u5386\u53f2\u8bb0\u5f55\u67e5\u770b\n4. \u81ea\u52a8\u4fdd\u5b58\u548c\u72b6\u6001\u6062\u590d\u529f\u80fd\n5. \u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u548c\u7cfb\u7edf\u5065\u58ee\u6027\n\n\u4f9d\u8d56\uff1a\npip install openai>=1.30.0 python-dotenv>=1.0.0 termcolor>=2.3.0 filelock>=3.13.0 tenacity>=8.2.3\n\n\u73af\u5883\u8981\u6c42\uff1a\n- \u9700\u8981\u8bbe\u7f6eOPENAI_API_KEY\u73af\u5883\u53d8\u91cf\n- \u5efa\u8baePython 3.10+\u7248\u672c\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nimport asyncio\nimport logging\nfrom enum import Enum, auto\nfrom pathlib import Path\nfrom typing import List, Dict, Optional, Tuple, TypedDict, Any, final\nfrom dataclasses import dataclass, field\nfrom termcolor import colored\nfrom openai import AsyncOpenAI, APIError, APITimeoutError, AuthenticationError\nfrom dotenv import load_dotenv\nfrom filelock import FileLock, Timeout\nfrom tenacity import (\n    retry, \n    stop_after_attempt, \n    wait_exponential, \n    retry_if_exception_type,\n    before_log\n)\n\n# \u914d\u7f6e\u65e5\u5fd7\u8bb0\u5f55\nlogging.basicConfig(\n    filename='game.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# \u5e38\u91cf\u5b9a\u4e49\nMAX_HISTORY_LENGTH = 20\nMAX_RETRY_ATTEMPTS = 3\nAUTO_SAVE_INTERVAL = 300  # 5\u5206\u949f\nDEFAULT_TIMEOUT = 30.0\n\nclass Language(Enum):\n    ZH_CN = auto()\n    EN_US = auto()\n\nclass GameState(TypedDict):\n    current_chapter: int\n    story_history: List[str]\n    decision_points: List[int]\n    achievements: Dict[str, Tuple[str, bool]]\n    achievement_progress: Dict[str, Dict[str, int]]\n\nclass AchievementData(TypedDict):\n    name: Dict[Language, str]\n    target: int\n\nACHIEVEMENTS: Dict[str, AchievementData] = {\n    'story_master': {\n        'name': {\n            Language.ZH_CN: \"\u4f20\u5947\u53d9\u4e8b\u8005\",\n            Language.EN_US: \"Story Master\"\n        },\n        'target': 10\n    },\n    'risk_taker': {\n        'name': {\n            Language.ZH_CN: \"\u5192\u9669\u5148\u950b\",\n            Language.EN_US: \"Risk Taker\"\n        },\n        'target': 5\n    }\n}\n\n@dataclass(frozen=True)\nclass GameConfig:\n    language: Language = Language.ZH_CN\n    auto_save: bool = True\n    save_interval: int = AUTO_SAIVE_INTERVAL\n    animation_speed: float = 0.03\n    max_history: int = MAX_HISTORY_LENGTH\n\nclass ConfigManager:\n    _instance: Optional['ConfigManager'] = None\n    _config: GameConfig = field(default_factory=GameConfig)\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            try:\n                load_dotenv()\n                cls._config = GameConfig(\n                    language=Language[os.getenv('GAME_LANGUAGE', 'ZH_CN')],\n                    auto_save=os.getenv('AUTO_SAVE', 'true').lower() == 'true',\n                    save_interval=int(os.getenv('SAVE_INTERVAL', str(AUTO_SAVE_INTERVAL))),\n                    animation_speed=float(os.getenv('ANIMATION_SPEED', '0.03')),\n                    max_history=int(os.getenv('MAX_HISTORY', str(MAX_HISTORY_LENGTH)))\n                )\n            except Exception as e:\n                logger.critical(\"\u914d\u7f6e\u52a0\u8f7d\u5931\u8d25: %s\", exc_info=True)\n                cls._config = GameConfig()\n        return cls._instance\n    \n    def get(self, key: str) -> Any:\n        if hasattr(self._config, key):\n            return getattr(self._config, key)\n        raise AttributeError(f\"\u65e0\u6548\u914d\u7f6e\u9879: {key}\")\n\nclass GameStateManager:\n    def __init__(self):\n        self._state: Optional[GameState] = None\n        self._lock = asyncio.Lock()\n    \n    async def initialize(self) -> None:\n        \"\"\"\u521d\u59cb\u5316\u6e38\u620f\u72b6\u6001\uff0c\u5e26\u6709\u81ea\u52a8\u6062\u590d\u673a\u5236\"\"\"\n        async with self._lock:\n            if self._state is not None:\n                return\n            \n            try:\n                self._state = await self._try_load_save()\n            except (FileNotFoundError, json.JSONDecodeError):\n                logger.warning(\"\u5b58\u6863\u52a0\u8f7d\u5931\u8d25\uff0c\u521d\u59cb\u5316\u65b0\u6e38\u620f\")\n                self._state = self._load_initial_state()\n            except Exception as e:\n                logger.error(\"\u72b6\u6001\u521d\u59cb\u5316\u5f02\u5e38: %s\", exc_info=True)\n                self._state = self._load_initial_state()\n    \n    def _load_initial_state(self) -> GameState:\n        \"\"\"\u521d\u59cb\u5316\u6e38\u620f\u72b6\u6001\"\"\"\n        lang = ConfigManager().get('language')\n        return {\n            'current_chapter': 0,\n            'story_history': [],\n            'decision_points': [],\n            'achievements': {\n                k: (v['name'][lang], False) \n                for k, v in ACHIEVEMENTS.items()\n            },\n            'achievement_progress': {\n                k: {'current': 0, 'target': v['target']}\n                for k, v in ACHIEVEMENTS.items()\n            }\n        }\n    \n    async def _try_load_save(self) -> GameState:\n        \"\"\"\u5c1d\u8bd5\u52a0\u8f7d\u5b58\u6863\u6587\u4ef6\uff0c\u5e26\u6709\u5b8c\u6574\u6027\u6821\u9a8c\"\"\"\n        for attempt in range(MAX_RETRY_ATTEMPTS):\n            try:\n                with FileLock(\"save.lock\", timeout=5), open(\"save.json\", 'r', encoding='utf-8') as f:\n                    state: GameState = json.load(f)\n                \n                # \u72b6\u6001\u5b8c\u6574\u6027\u6821\u9a8c\n                required_keys = {'current_chapter', 'story_history', 'decision_points', \n                               'achievements', 'achievement_progress'}\n                if not all(key in state for key in required_keys):\n                    raise ValueError(\"\u5b58\u6863\u6587\u4ef6\u4e0d\u5b8c\u6574\")\n                \n                return state\n            except (Timeout, PermissionError) as e:\n                logger.warning(\"\u6587\u4ef6\u8bbf\u95ee\u51b2\u7a81\uff0c\u91cd\u8bd5\u4e2d... (\u5c1d\u8bd5\u6b21\u6570: %d)\", attempt+1)\n                await asyncio.sleep(1)\n            except Exception as e:\n                logger.error(\"\u5b58\u6863\u52a0\u8f7d\u5931\u8d25: %s\", exc_info=True)\n                raise\n        \n        raise RuntimeError(\"\u65e0\u6cd5\u52a0\u8f7d\u5b58\u6863\u6587\u4ef6\")\n\n    @property\n    def state(self) -> GameState:\n        if self._state is None:\n            raise RuntimeError(\"\u6e38\u620f\u72b6\u6001\u672a\u521d\u59cb\u5316\")\n        return self._state\n    \n    def increment_progress(self, achievement_id: str) -> None:\n        if achievement_id not in self.state['achievement_progress']:\n            raise ValueError(f\"\u65e0\u6548\u6210\u5c31ID: {achievement_id}\")\n        \n        progress = self.state['achievement_progress'][achievement_id]\n        progress['current'] = min(progress['current'] + 1, progress['target'])\n        \n        if progress['current'] >= progress['target']:\n            self.state['achievements'][achievement_id] = (\n                self.state['achievements'][achievement_id][0],\n                True\n            )\n\nclass GameInterface:\n    def __init__(self):\n        self.config = ConfigManager()\n        self.animation_task: Optional[asyncio.Task] = None\n    \n    async def _animate_text(self, text: str) -> None:\n        \"\"\"\u5e26\u9519\u8bef\u5904\u7406\u7684\u5f02\u6b65\u6587\u5b57\u52a8\u753b\"\"\"\n        try:\n            speed = self.config.get('animation_speed')\n            for char in text:\n                print(char, end='', flush=True)\n                await asyncio.sleep(speed)\n            print()\n        except (BrokenPipeError, KeyboardInterrupt):\n            logger.warning(\"\u52a8\u753b\u8f93\u51fa\u4e2d\u65ad\")\n            raise\n        except Exception as e:\n            logger.error(\"\u52a8\u753b\u6e32\u67d3\u9519\u8bef: %s\", exc_info=True)\n            print(text)  # \u964d\u7ea7\u5904\u7406\uff1a\u76f4\u63a5\u8f93\u51fa\u6587\u672c\n    \n    async def show_history(self) -> None:\n        \"\"\"\u663e\u793a\u5386\u53f2\u8bb0\u5f55\"\"\"\n        state_mgr = GameStateManager()\n        history = state_mgr.state['story_history'][-self.config.get('max_history'):]\n        \n        await self._safe_display(\n            header=\"\ud83d\udcdc \u6545\u4e8b\u5386\u53f2\",\n            color='cyan',\n            items=[f\"{i+1}. {entry[:50]}...\" for i, entry in enumerate(history)]\n        )\n    \n    async def show_progress(self) -> None:\n        \"\"\"\u663e\u793a\u6210\u5c31\u8fdb\u5ea6\"\"\"\n        state_mgr = GameStateManager()\n        progress = state_mgr.state['achievement_progress']\n        lang = self.config.get('language')\n        \n        items = []\n        for ach_id, data in ACHIEVEMENTS.items():\n            p = progress[ach_id]\n            items.append(f\"{data['name'][lang]}: {p['current']}/{p['target']}\")\n        \n        await self._safe_display(\n            header=\"\ud83c\udfc5 \u6210\u5c31\u8fdb\u5ea6\",\n            color='cyan',\n            items=items\n        )\n    \n    async def _safe_display(self, header: str, color: str, items: List[str]) -> None:\n        \"\"\"\u5b89\u5168\u7684\u683c\u5f0f\u5316\u663e\u793a\"\"\"\n        try:\n            print(colored(f\"\\n{header}\uff1a\", color))\n            for item in items:\n                print(f\"  \u2022 {item}\")\n        except Exception as e:\n            logger.error(\"\u754c\u9762\u663e\u793a\u9519\u8bef: %s\", exc_info=True)\n            print(colored(\"\\n[\u754c\u9762\u4fe1\u606f\u6682\u65f6\u4e0d\u53ef\u7528]\", 'red'))\n\n    async def get_choice(self, options: List[str]) -> int:\n        \"\"\"\u589e\u5f3a\u7684\u8f93\u5165\u9a8c\u8bc1\"\"\"\n        for attempt in range(MAX_RETRY_ATTEMPTS):\n            try:\n                choice = input(\"\\n\u8bf7\u9009\u62e9 (1-3/q\u9000\u51fa/help\u67e5\u770b\u547d\u4ee4): \").strip().lower()\n                \n                # \u5904\u7406\u7cfb\u7edf\u547d\u4ee4\n                if choice == 'q':\n                    return 0\n                if choice == 'help':\n                    self._display_help()\n                    continue\n                if choice == 'save':\n                    return -1\n                if choice == 'history':\n                    return -2\n                if choice == 'progress':\n                    return -3\n                \n                # \u8f93\u5165\u9a8c\u8bc1\n                if not choice.isalnum():\n                    raise ValueError(\"\u5305\u542b\u975e\u6cd5\u5b57\u7b26\")\n                \n                # \u6a21\u7cca\u5339\u914d\u903b\u8f91\n                valid_choices = []\n                for idx, opt in enumerate(options, 1):\n                    if str(idx) == choice or choice in opt.lower():\n                        valid_choices.append(idx)\n                \n                if len(valid_choices) == 1:\n                    return valid_choices[0]\n                \n                raise ValueError(\"\u4e0d\u660e\u786e\u7684\u9009\u9879\")\n            except ValueError as e:\n                logger.warning(\"\u65e0\u6548\u8f93\u5165: %s\", choice)\n                print(colored(f\"\u9519\u8bef: {str(e)}\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\", 'yellow'))\n        \n        logger.error(\"\u591a\u6b21\u8f93\u5165\u9519\u8bef\uff0c\u9000\u51fa\u6e38\u620f\")\n        print(colored(\"\\n\u8f93\u5165\u9519\u8bef\u6b21\u6570\u8fc7\u591a\uff0c\u6e38\u620f\u5373\u5c06\u9000\u51fa\", 'red'))\n        return 0\n\n    def _display_help(self) -> None:\n        \"\"\"\u663e\u793a\u5e2e\u52a9\u4fe1\u606f\"\"\"\n        help_text = \"\"\"\n        \u53ef\u7528\u547d\u4ee4\uff1a\n        q       - \u9000\u51fa\u6e38\u620f\n        help    - \u663e\u793a\u6b64\u5e2e\u52a9\n        save    - \u624b\u52a8\u4fdd\u5b58\u8fdb\u5ea6\n        history - \u67e5\u770b\u6700\u8fd1\u5386\u53f2\n        progress - \u663e\u793a\u6210\u5c31\u8fdb\u5ea6\n        \"\"\"\n        print(colored(help_text, 'magenta'))\n\nclass StoryGenerator:\n    def __init__(self):\n        self.client = AsyncOpenAI(api_key=self._get_api_key())\n        self.model = \"gpt-3.5-turbo\"\n    \n    def _get_api_key(self) -> str:\n        \"\"\"\u5b89\u5168\u83b7\u53d6API\u5bc6\u94a5\"\"\"\n        key = os.getenv('OPENAI_API_KEY')\n        if not key:\n            logger.critical(\"\u7f3a\u5c11OPENAI_API_KEY\u73af\u5883\u53d8\u91cf\")\n            print(colored(\"\u9519\u8bef\uff1a\u672a\u914d\u7f6eAPI\u5bc6\u94a5\", 'red'))\n            sys.exit(1)\n        return key\n    \n    @retry(\n        stop=stop_after_attempt(3),\n        wait=wait_exponential(multiplier=1, min=2, max=10),\n        retry=retry_if_exception_type((APIError, APITimeoutError, asyncio.TimeoutError)),\n        before=before_log(logger, logging.INFO)\n    )\n    async def generate_chapter(self, context: str) -> Tuple[str, List[str]]:\n        \"\"\"\u751f\u6210\u65b0\u7684\u6545\u4e8b\u7ae0\u8282\uff0c\u5e26\u8d85\u65f6\u548c\u91cd\u8bd5\u673a\u5236\"\"\"\n        try:\n            prompt = f\"\u4f5c\u4e3a\u7384\u5e7b\u5c0f\u8bf4\u751f\u6210\u5668\uff0c\u6839\u636e\u4ee5\u4e0b\u4e0a\u4e0b\u6587\u7eed\u5199\u6545\u4e8b\uff1a{context}\"\n            \n            response = await asyncio.wait_for(\n                self.client.chat.completions.create(\n                    model=self.model,\n                    messages=[{\n                        \"role\": \"user\",\n                        \"content\": prompt\n                    }],\n                    temperature=1.0,\n                    max_tokens=500\n                ),\n                timeout=DEFAULT_TIMEOUT\n            )\n            \n            content = response.choices[0].message.content\n            if not content:\n                raise ValueError(\"\u7a7a\u54cd\u5e94\u5185\u5bb9\")\n            \n            # \u5206\u5272\u9009\u9879\n            lines = content.split('\\n')\n            story = '\\n'.join(lines[:-3])\n            options = [line.strip() for line in lines[-3:] if line.strip()]\n            \n            if len(options) < 2:\n                raise ValueError(\"\u65e0\u6548\u7684\u9009\u9879\u6570\u91cf\")\n            \n            return story, options\n        except AuthenticationError as e:\n            logger.critical(\"API\u8ba4\u8bc1\u5931\u8d25: %s\", e)\n            print(colored(\"API\u5bc6\u94a5\u65e0\u6548\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\", 'red'))\n            sys.exit(1)\n        except Exception as e:\n            logger.error(\"\u6545\u4e8b\u751f\u6210\u5931\u8d25: %s\", exc_info=True)\n            raise\n\nclass GameController:\n    def __init__(self):\n        self.state_mgr = GameStateManager()\n        self.interface = GameInterface()\n        self.generator = StoryGenerator()\n        self.last_save = time.time()\n    \n    async def initialize(self) -> None:\n        \"\"\"\u521d\u59cb\u5316\u6e38\u620f\u7cfb\u7edf\"\"\"\n        try:\n            await self.state_mgr.initialize()\n            logger.info(\"\u6e38\u620f\u521d\u59cb\u5316\u5b8c\u6210\")\n        except Exception as e:\n            logger.critical(\"\u6e38\u620f\u521d\u59cb\u5316\u5931\u8d25: %s\", exc_info=True)\n            print(colored(\"\u81f4\u547d\u9519\u8bef\uff1a\u65e0\u6cd5\u542f\u52a8\u6e38\u620f\", 'red'))\n            sys.exit(1)\n    \n    async def run(self) -> None:\n        \"\"\"\u4e3b\u6e38\u620f\u5faa\u73af\"\"\"\n        try:\n            while True:\n                await self._game_loop()\n        except KeyboardInterrupt:\n            await self._handle_exit()\n    \n    async def _game_loop(self) -> None:\n        \"\"\"\u5355\u6b21\u6e38\u620f\u5faa\u73af\"\"\"\n        current_chapter = self.state_mgr.state['current_chapter']\n        context = self._get_story_context()\n        \n        try:\n            story, options = await self.generator.generate_chapter(context)\n            await self.interface._animate_text(f\"\\n\u7b2c {current_chapter + 1} \u7ae0\\n{story}\")\n            \n            for i, opt in enumerate(options, 1):\n                await self.interface._animate_text(f\"{i}. {opt}\")\n            \n            choice = await self.interface.get_choice(options)\n            await self._process_choice(choice, story)\n            await self._auto_save",
      "hash": "9b8272e6c79b5bfcd53fd7220038ac81"
    }
  },
  "history": [],
  "user_feedback": [
    "\u521b\u5efa\u4e00\u4e2a\u8c03\u7528openai\u63a5\u53e3\u7684\u7384\u5e7b\u5c0f\u8bf4\u5386\u9669\u8bb0\uff0c\u901a\u8fc7\u5bf9\u8bdd\u7684\u5f62\u5f0f\uff0c\u6765\u63a8\u52a8\u6545\u4e8b\u7684\u524d\u8fdb\uff0c\u6545\u4e8b\u8981\u6709\u723d\u70b9\u6709\u521b\u65b0",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\n\u4f9d\u8d56\uff1apip install openai python-dotenv\n\"\"\"\n\nimport os\nimport sys\nimport time\nfrom typing import List, Dict\nimport openai\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nclass StoryManager:\n    \"\"\"\u7ba1\u7406\u6545\u4e8b\u751f\u6210\u72b6\u6001\u548c\u4e0a\u4e0b\u6587\"\"\"\n    \n    def __init__(self):\n        self.story_history: List[Dict] = []\n        self.current_chapter = 1\n        self.max_retries = 3\n        self.base_prompt = \"\"\"\n            \u4f60\u662f\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5927\u5e08\uff0c\u8bf7\u751f\u6210\u5305\u542b\u4ee5\u4e0b\u8981\u7d20\u7684\u5192\u9669\u6545\u4e8b\uff1a\n            1. \u4e3b\u89d2\u62e5\u6709\u7279\u6b8a\u4f53\u8d28\u6216\u91d1\u624b\u6307\n            2. \u5305\u542b\u81f3\u5c11\u4e09\u4e2a\u521b\u65b0\u4fee\u70bc\u4f53\u7cfb\n            3. \u6bcf\u7ae0\u5fc5\u987b\u6709\u6218\u6597\u60c5\u8282\u548c\u5b9d\u7269\u83b7\u5f97\n            4. \u5305\u542b\u610f\u60f3\u4e0d\u5230\u7684\u5267\u60c5\u8f6c\u6298\n            5. \u5bf9\u573a\u666f\u548c\u529f\u6cd5\u8fdb\u884c\u8be6\u7ec6\u63cf\u5199\n            \u8bf7\u7528\u4e2d\u6587\u4ee5150\u5b57\u5de6\u53f3\u7684\u6bb5\u843d\u5448\u73b0\uff0c\u7ed3\u5c3e\u7ed9\u51fa2-3\u4e2a\u9009\u62e9\u5206\u652f\n        \"\"\"\n        \n    def generate_story_prompt(self, user_input: str = None) -> List[Dict]:\n        \"\"\"\u6784\u9020\u5e26\u4e0a\u4e0b\u6587\u7684\u63d0\u793a\u8bcd\"\"\"\n        system_msg = {\n            \"role\": \"system\",\n            \"content\": f\"{self.base_prompt} \u5f53\u524d\u662f\u7b2c{self.current_chapter}\u7ae0\uff0c\u4fdd\u6301\u6545\u4e8b\u8fde\u8d2f\u6027\u3002\"\n        }\n        \n        messages = [system_msg]\n        \n        # \u6dfb\u52a0\u4e0a\u4e0b\u6587\u5386\u53f2\n        if self.story_history:\n            messages += self.story_history[-4:]  # \u4fdd\u6301\u6700\u8fd13\u8f6e\u5bf9\u8bdd\n        \n        # \u6dfb\u52a0\u7528\u6237\u8f93\u5165\n        if user_input:\n            messages.append({\"role\": \"user\", \"content\": user_input})\n        else:\n            messages.append({\"role\": \"user\", \"content\": \"\u8bf7\u5f00\u59cb\u65b0\u7684\u6545\u4e8b\"})\n            \n        return messages\n\nclass OpenAIClient:\n    \"\"\"\u5904\u7406OpenAI API\u4ea4\u4e92\"\"\"\n    \n    def __init__(self):\n        self.model = \"gpt-3.5-turbo\"\n        self.temperature = 0.8\n        self.max_tokens = 1500\n        \n    def generate_story(self, messages: List[Dict]) -> str:\n        \"\"\"\u8c03\u7528OpenAI\u751f\u6210\u6545\u4e8b\u5185\u5bb9\"\"\"\n        for _ in range(3):  # \u91cd\u8bd5\u673a\u5236\n            try:\n                response = openai.ChatCompletion.create(\n                    model=self.model,\n                    messages=messages,\n                    temperature=self.temperature,\n                    max_tokens=self.max_tokens\n                )\n                return response.choices[0].message['content'].strip()\n            except Exception as e:\n                print(f\"API\u9519\u8bef: {e}, \u91cd\u8bd5\u4e2d...\")\n                time.sleep(2)\n        return \"\u6545\u4e8b\u751f\u6210\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\"\n\ndef display_story(content: str):\n    \"\"\"\u7f8e\u5316\u6545\u4e8b\u663e\u793a\"\"\"\n    print(\"\\n\" + \"=\"*50)\n    print(f\"\ud83d\udcd6 \u7b2c{story_mgr.current_chapter}\u7ae0 \ud83d\udcd6\")\n    print(\"-\"*50)\n    print(content.replace(\". \", \".\\n\"))\n    print(\"=\"*50 + \"\\n\")\n\ndef main():\n    \"\"\"\u4e3b\u7a0b\u5e8f\u5165\u53e3\"\"\"\n    story_mgr = StoryManager()\n    ai_client = OpenAIClient()\n    \n    print(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\")\n    print(\"\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u6570\u5b57\uff09\u6216\u81ea\u7531\u8f93\u5165\uff0c\u8f93\u5165q\u9000\u51fa\\n\")\n    \n    user_input = None\n    while True:\n        # \u751f\u6210\u6545\u4e8b\u5185\u5bb9\n        messages = story_mgr.generate_story_prompt(user_input)\n        story_content = ai_client.generate_story(messages)\n        \n        # \u5904\u7406\u751f\u6210\u5931\u8d25\u7684\u60c5\u51b5\n        if \"\u5931\u8d25\" in story_content:\n            print(story_content)\n            break\n            \n        display_story(story_content)\n        \n        # \u8bb0\u5f55\u5386\u53f2\n        story_mgr.story_history.extend([\n            {\"role\": \"assistant\", \"content\": story_content},\n            {\"role\": \"user\", \"content\": user_input} if user_input else None\n        ])\n        \n        # \u83b7\u53d6\u7528\u6237\u8f93\u5165\n        choice = input(\"\u8bf7\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u8f93\u5165\u6570\u5b57\u6216\u81ea\u5b9a\u4e49\u5185\u5bb9\uff09\uff1a\").strip()\n        if choice.lower() == 'q':\n            print(\"\\n\u5192\u9669\u7ed3\u675f\uff0c\u671f\u5f85\u4e0b\u6b21\u518d\u89c1\uff01\")\n            break\n            \n        user_input = f\"\u7528\u6237\u9009\u62e9\uff1a{choice}\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u9009\u62e9\u7ee7\u7eed\u53d1\u5c55\u6545\u4e8b\uff0c\u4fdd\u6301\u8282\u594f\u7d27\u51d1\uff0c\u5e76\u6dfb\u52a0\u65b0\u7684\u51b2\u7a81\u548c\u5947\u9047\u3002\"\n        story_mgr.current_chapter += 1\n        \nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\n\u64cd\u4f5c\u5df2\u4e2d\u65ad\")\n        sys.exit(0)\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u6269\u5c55\u73b0\u6709\u529f\u80fd\uff0c\u6dfb\u52a0\u65b0\u7279\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u7248 v2.0\n\u6539\u8fdb\u5185\u5bb9\uff1a\n1. \u5b8c\u6574\u6e38\u620f\u5faa\u73af\u5b9e\u73b0\n2. \u589e\u5f3a\u578b\u6210\u5c31\u7cfb\u7edf\n3. \u5b89\u5168\u6587\u4ef6\u4fdd\u5b58\n4. \u591a\u8bed\u8a00\u652f\u6301\n5. \u70ed\u91cd\u8f7d\u914d\u7f6e\n\u4f9d\u8d56\uff1apip install openai python-dotenv termcolor filelock tenacity\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nfrom pathlib import Path\nfrom typing import List, Dict, Optional\nfrom termcolor import colored\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nfrom filelock import FileLock, Timeout\nfrom tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type\n\n# \u6dfb\u52a0\u7236\u76ee\u5f55\u5230\u7cfb\u7edf\u8def\u5f84\nsys.path.append(str(Path(__file__).parent.parent.parent.parent))\n\n# \u73b0\u5728\u53ef\u4ee5\u6b63\u786e\u5bfc\u5165\u914d\u7f6e\nfrom ai.config import (\n    API_CONFIG,\n    MODEL_CONFIG,\n    SYSTEM_PROMPTS,\n    DEV_CONFIG,\n    OUTPUT_CONFIG,\n    PathConfig\n)\n\nclass StoryGenerationError(Exception):\n    \"\"\"\u6545\u4e8b\u751f\u6210\u9519\u8bef\"\"\"\n    pass\n\nclass ConfigError(Exception):\n    \"\"\"\u914d\u7f6e\u9519\u8bef\"\"\"\n    pass\n\nclass UserConfig:\n    \"\"\"\u7528\u6237\u914d\u7f6e\u7ba1\u7406\"\"\"\n    def __init__(self):\n        self.config = self.load_or_init_config()\n        \n    def load_or_init_config(self) -> Dict:\n        \"\"\"\u52a0\u8f7d\u6216\u521d\u59cb\u5316\u914d\u7f6e\"\"\"\n        default_config = {\n            'language': 'zh-CN',\n            'auto_save': True,\n            'save_interval': 300,  # 5\u5206\u949f\n            'timeout': API_CONFIG['timeout'],\n            'model': MODEL_CONFIG['model']\n        }\n        \n        config_path = Path(\"config.json\")\n        if config_path.exists():\n            try:\n                with open(config_path, 'r', encoding='utf-8') as f:\n                    loaded_config = json.load(f)\n                    return {**default_config, **loaded_config}\n            except Exception as e:\n                print(colored(f\"\u52a0\u8f7d\u914d\u7f6e\u5931\u8d25: {e}\", 'yellow'))\n                \n        return default_config\n    \n    def reload_config(self):\n        \"\"\"\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\"\"\"\n        self.config = self.load_or_init_config()\n\nclass StoryManager:\n    \"\"\"\u6545\u4e8b\u7ba1\u7406\u5668\"\"\"\n    def __init__(self, config: UserConfig):\n        self.config = config\n        self.current_chapter = 0\n        self.story_history = []\n        self.decision_points = []\n        self.last_save_time = time.time()\n        self.achievements = {\n            'treasure_hunter': ('\u5bfb\u5b9d\u8fbe\u4eba', False),\n            'story_master': ('\u6545\u4e8b\u5927\u5e08', False)\n        }\n        self.achievement_progress = {\n            'treasure_hunter': {'current': 0, 'target': 5},\n            'story_master': {'current': 0, 'target': 10}\n        }\n        \n    def generate_story_prompt(self) -> str:\n        \"\"\"\u751f\u6210\u6545\u4e8b\u63d0\u793a\"\"\"\n        base_prompt = (\n            \"\u8bf7\u751f\u6210\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u573a\u666f\uff0c\u4e25\u683c\u6309\u7167\u4ee5\u4e0b\u683c\u5f0f\u8f93\u51fa\uff1a\\n\"\n            \"1. \u5148\u63cf\u8ff0\u573a\u666f\u548c\u60c5\u51b5\\n\"\n            '2. \u7a7a\u4e00\u884c\u540e\u5199\u4e0a\"\u9009\u9879\uff1a\"\\n'\n            \"3. \u7136\u540e\u6bcf\u884c\u5217\u51fa\u4e00\u4e2a\u9009\u9879\uff0c\u5171\u4e09\u4e2a\u9009\u9879\\n\\n\"\n            \"\u793a\u4f8b\u683c\u5f0f\uff1a\\n\"\n            \"\u4f60\u6765\u5230\u4e86\u4e00\u5ea7\u53e4\u8001\u7684\u5c71\u6d1e\u524d\uff0c\u6d1e\u53e3\u523b\u7740\u795e\u79d8\u7684\u7b26\u6587\u3002\u5c71\u6d1e\u5185\u4f20\u6765\u9635\u9635\u5bd2\u6c14\uff0c\u4f46\u4f3c\u4e4e\u8574\u542b\u7740\u5b9d\u7269\u7684\u6c14\u606f\u3002\\n\\n\"\n            \"\u9009\u9879\uff1a\\n\"\n            \"\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u8fdb\u5165\u5c71\u6d1e\u63a2\u7d22\\n\"\n            \"\u4f7f\u7528\u6cd5\u672f\u63a2\u6d4b\u5c71\u6d1e\u5185\u7684\u60c5\u51b5\\n\"\n            \"\u5728\u6d1e\u53e3\u7814\u7a76\u7b26\u6587\u7684\u542b\u4e49\\n\\n\"\n            f\"\u5f53\u524d\u7ae0\u8282\uff1a{self.current_chapter + 1}\\n\"\n        )\n        \n        if self.story_history:\n            base_prompt += f\"\\n\u524d\u60c5\u63d0\u8981\uff1a\\n{self.story_history[-1]}\\n\"\n            \n        return base_prompt\n    \n    def check_achievements(self) -> List[str]:\n        \"\"\"\u68c0\u67e5\u5e76\u89e3\u9501\u6210\u5c31\"\"\"\n        new_achievements = []\n        for ach_id, progress in self.achievement_progress.items():\n            if progress['current'] >= progress['target']:\n                if not self.achievements[ach_id][1]:\n                    self.achievements[ach_id] = (self.achievements[ach_id][0], True)\n                    new_achievements.append(ach_id)\n        return new_achievements\n\nclass StoryFormatter:\n    \"\"\"\u6545\u4e8b\u683c\u5f0f\u5316\u5668\"\"\"\n    @classmethod\n    def display_story(cls, content: str, chapter: int, config: UserConfig) -> List[str]:\n        \"\"\"\u663e\u793a\u6545\u4e8b\u5185\u5bb9\"\"\"\n        print(colored(f\"\\n\u7b2c {chapter + 1} \u7ae0\", 'cyan'))\n        print(\"=\" * 50)\n        \n        try:\n            # \u5206\u79bb\u6545\u4e8b\u5185\u5bb9\u548c\u9009\u9879\n            parts = content.split(\"\\n\u9009\u9879\uff1a\")\n            if len(parts) != 2:\n                raise StoryGenerationError(\"\u6545\u4e8b\u683c\u5f0f\u9519\u8bef\")\n                \n            story, options_text = parts\n            print(story.strip())\n            print(\"\\n\u9009\u9879\uff1a\")\n            \n            # \u89e3\u6790\u9009\u9879\n            options = []\n            for i, option in enumerate(options_text.strip().split(\"\\n\"), 1):\n                option = option.strip()\n                if option:  # \u53ea\u6dfb\u52a0\u975e\u7a7a\u9009\u9879\n                    print(colored(f\"{i}. {option}\", 'green'))\n                    options.append(option)\n            \n            # \u9a8c\u8bc1\u9009\u9879\u6570\u91cf\n            if len(options) < 3:\n                raise StoryGenerationError(\"\u9009\u9879\u6570\u91cf\u4e0d\u8db3\")\n                \n            return options\n            \n        except Exception as e:\n            raise StoryGenerationError(f\"\u663e\u793a\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n    \n    @classmethod\n    def display_achievement(cls, achievement: str, language: str):\n        \"\"\"\u663e\u793a\u6210\u5c31\"\"\"\n        ACHIEVEMENT_TEXTS = {\n            'treasure_hunter': {\n                'zh-CN': '\ud83c\udfc6 \u6210\u5c31\u89e3\u9501\uff1a\u5bfb\u5b9d\u8fbe\u4eba',\n                'en-US': '\ud83c\udfc6 Achievement Unlocked: Treasure Hunter'\n            },\n            'story_master': {\n                'zh-CN': '\ud83c\udfc6 \u6210\u5c31\u89e3\u9501\uff1a\u6545\u4e8b\u5927\u5e08',\n                'en-US': '\ud83c\udfc6 Achievement Unlocked: Story Master'\n            }\n        }\n        print(colored(ACHIEVEMENT_TEXTS[achievement][language], 'magenta'))\n\nclass GameEngine:\n    \"\"\"\u6e38\u620f\u5f15\u64ce\"\"\"\n    def __init__(self, api_key: str):\n        self.config = UserConfig()\n        self.story_manager = StoryManager(self.config)\n        self.client = OpenAI(\n            api_key=api_key,\n            base_url=API_CONFIG['base_url'],\n            timeout=API_CONFIG['timeout']\n        )\n        self.is_running = True\n        self.max_retries = API_CONFIG['max_retries']\n        self.retry_delay = API_CONFIG['retry_delay']\n        \n    @retry(\n        stop=stop_after_attempt(3),\n        wait=wait_exponential(multiplier=2, min=4, max=60),\n        retry=retry_if_exception_type(StoryGenerationError)\n    )\n    def generate_story(self, prompt: str) -> str:\n        \"\"\"\u751f\u6210\u6545\u4e8b\u5185\u5bb9\uff0c\u5e26\u6709\u81ea\u52a8\u91cd\u8bd5\u673a\u5236\"\"\"\n        try:\n            response = self.client.chat.completions.create(\n                model=MODEL_CONFIG['model'],\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": (\n                            \"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u7384\u5e7b\u5c0f\u8bf4\u4f5c\u5bb6\u3002\u8bf7\u4e25\u683c\u6309\u7167\u4ee5\u4e0b\u683c\u5f0f\u751f\u6210\u5185\u5bb9\uff1a\\n\"\n                            \"1. \u5148\u5199\u4e00\u6bb5\u751f\u52a8\u7684\u573a\u666f\u63cf\u8ff0\\n\"\n                            \"2. \u7a7a\u4e00\u884c\\n\"\n                            '3. \u5199\u4e0a\"\u9009\u9879\uff1a\"\\n'\n                            \"4. \u6bcf\u884c\u5199\u4e00\u4e2a\u9009\u9879\uff0c\u5171\u4e09\u4e2a\u9009\u9879\\n\\n\"\n                            \"\u793a\u4f8b\uff1a\\n\"\n                            \"\u6f06\u9ed1\u7684\u5c71\u6d1e\u524d\uff0c\u4e00\u9635\u5bd2\u98ce\u5439\u8fc7\u3002\u6d1e\u53e3\u7684\u7b26\u6587\u6563\u53d1\u7740\u5fae\u5f31\u7684\u5149\u8292\uff0c\u4f3c\u4e4e\u5728\u8bc9\u8bf4\u7740\u8fdc\u53e4\u7684\u79d8\u5bc6\u3002\\n\\n\"\n                            \"\u9009\u9879\uff1a\\n\"\n                            \"\u4ed4\u7ec6\u89c2\u5bdf\u7b26\u6587\u7684\u7eb9\u8def\\n\"\n                            \"\u5927\u80c6\u8e0f\u5165\u5c71\u6d1e\u63a2\u7d22\\n\"\n                            \"\u4f7f\u7528\u6cd5\u672f\u63a2\u6d4b\u6d1e\u5185\u60c5\u51b5\"\n                        )\n                    },\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                temperature=MODEL_CONFIG['temperature'],\n                max_tokens=MODEL_CONFIG['max_tokens'],\n                stream=MODEL_CONFIG['stream']\n            )\n            \n            story_content = []\n            if MODEL_CONFIG['stream']:\n                for chunk in response:\n                    if chunk.choices[0].delta.content:\n                        content = chunk.choices[0].delta.content\n                        story_content.append(content)\n                        print(content, end='', flush=True)\n                content = ''.join(story_content)\n            else:\n                content = response.choices[0].message.content\n\n            # \u683c\u5f0f\u9a8c\u8bc1\u548c\u4fee\u590d\n            return self._format_story_content(content)\n            \n        except Exception as e:\n            print(colored(f\"\\n\u26a0\ufe0f \u751f\u6210\u6545\u4e8b\u65f6\u51fa\u9519: {str(e)}\", 'yellow'))\n            raise StoryGenerationError(f\"\u751f\u6210\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n\n    def _format_story_content(self, content: str) -> str:\n        \"\"\"\u683c\u5f0f\u5316\u548c\u9a8c\u8bc1\u6545\u4e8b\u5185\u5bb9\"\"\"\n        try:\n            # \u8c03\u8bd5\u8f93\u51fa\n            if DEV_CONFIG.get('debug'):\n                print(\"\\nDebug - Raw content:\", repr(content))\n\n            # \u57fa\u672c\u683c\u5f0f\u68c0\u67e5\n            if not content or len(content.strip()) < 10:\n                raise StoryGenerationError(\"\u751f\u6210\u7684\u5185\u5bb9\u8fc7\u77ed\")\n\n            # \u89c4\u8303\u5316\u6362\u884c\u7b26\n            content = content.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n            \n            # \u5c1d\u8bd5\u591a\u79cd\u5206\u9694\u7b26\uff0c\u5305\u62ec\u5168\u89d2\u548c\u534a\u89d2\n            separators = [\"\u9009\u9879\uff1a\", \"\u9009\u9879:\", \"\\n\u9009\u9879\uff1a\", \"\\n\u9009\u9879:\", \"\u9009\u62e9\uff1a\", \"\u9009\u62e9:\"]\n            parts = None\n            \n            for sep in separators:\n                if sep in content:\n                    parts = content.split(sep, 1)  # \u53ea\u5206\u5272\u4e00\u6b21\n                    if len(parts) == 2:\n                        story = parts[0].strip()\n                        options = parts[1].strip()\n                        \n                        # \u5904\u7406\u9009\u9879\n                        option_lines = [line.strip() for line in options.split('\\n') if line.strip()]\n                        if len(option_lines) >= 3:\n                            return f\"{story}\\n\\n\u9009\u9879\uff1a\\n{option_lines[0]}\\n{option_lines[1]}\\n{option_lines[2]}\"\n            \n            # \u5982\u679c\u65e0\u6cd5\u6b63\u786e\u5206\u5272\uff0c\u629b\u51fa\u5f02\u5e38\n            raise StoryGenerationError(\"\u65e0\u6cd5\u8bc6\u522b\u6545\u4e8b\u683c\u5f0f\")\n            \n        except Exception as e:\n            if DEV_CONFIG.get('debug'):\n                print(\"\\nDebug - Error details:\", str(e))\n            raise StoryGenerationError(f\"\u683c\u5f0f\u5316\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n\n    def main_loop(self):\n        \"\"\"\u4e3b\u6e38\u620f\u5faa\u73af\"\"\"\n        print(colored(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\", 'cyan'))\n        \n        while self.is_running:\n            try:\n                # \u751f\u6210\u6545\u4e8b\n                prompt = self.story_manager.generate_story_prompt()\n                content = self.generate_story(prompt)\n                \n                # \u663e\u793a\u6545\u4e8b\n                options = StoryFormatter.display_story(\n                    content,\n                    self.story_manager.current_chapter,\n                    self.config\n                )\n                \n                # \u68c0\u67e5\u6210\u5c31\n                new_achs = self.story_manager.check_achievements()\n                for ach in new_achs:\n                    StoryFormatter.display_achievement(\n                        ach,\n                        self.config.config['language']\n                    )\n                \n                # \u83b7\u53d6\u7528\u6237\u9009\u62e9\n                choice = self.get_user_choice(options)\n                if choice == 0:  # \u9000\u51fa\n                    self.save_game()\n                    break\n                elif choice > 0:\n                    self.story_manager.story_history.append(content)\n                    self.story_manager.decision_points.append(choice - 1)\n                    self.story_manager.current_chapter += 1\n                    \n                # \u81ea\u52a8\u4fdd\u5b58\n                self.auto_save()\n                \n            except StoryGenerationError as e:\n                print(colored(f\"\\n\u274c \u9519\u8bef: {e}\", 'red'))\n                if not self.handle_error():\n                    break\n            except Exception as e:\n                print(colored(f\"\\n\u274c \u672a\u9884\u671f\u7684\u9519\u8bef: {e}\", 'red'))\n                if not self.handle_error():\n                    break\n    \n    def get_user_choice(self, options: List[str]) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u9009\u62e9\"\"\"\n        while True:\n            try:\n                choice = input(\"\\n\u8bf7\u9009\u62e9 (1-3\uff0c\u6216\u8f93\u5165 q \u9000\u51fa): \").strip().lower()\n                if choice == 'q':\n                    return 0\n                    \n                choice = int(choice)\n                if 1 <= choice <= len(options):\n                    return choice\n                    \n                print(colored(\"\u65e0\u6548\u7684\u9009\u62e9\uff0c\u8bf7\u91cd\u8bd5\", 'yellow'))\n            except ValueError:\n                print(colored(\"\u8bf7\u8f93\u5165\u6709\u6548\u7684\u6570\u5b57\", 'yellow'))\n    \n    def save_game(self):\n        \"\"\"\u4fdd\u5b58\u6e38\u620f\"\"\"\n        try:\n            save_data = {\n                \"chapter\": self.story_manager.current_chapter,\n                \"history\": self.story_manager.story_history,\n                \"decisions\": self.story_manager.decision_points,\n                \"achievements\": self.story_manager.achievements\n            }\n            \n            with FileLock(\"save.json.lock\", timeout=5):\n                with open(\"save.json\", 'w', encoding='utf-8') as f:\n                    json.dump(save_data, f, ensure_ascii=False, indent=2)\n                    \n            print(colored(\"\\n\u2705 \u6e38\u620f\u5df2\u4fdd\u5b58\", 'green'))\n            \n        except Exception as e:\n            print(colored(f\"\\n\u274c \u4fdd\u5b58\u5931\u8d25: {e}\", 'red'))\n    \n    def auto_save(self):\n        \"\"\"\u81ea\u52a8\u4fdd\u5b58\"\"\"\n        if (self.config.config['auto_save'] and \n            time.time() - self.story_manager.last_save_time > self.config.config['save_interval']):\n            self.save_game()\n            self.story_manager.last_save_time = time.time()\n    \n    def handle_error(self) -> bool:\n        \"\"\"\u5904\u7406\u9519\u8bef\u5e76\u8be2\u95ee\u662f\u5426\u91cd\u8bd5\"\"\"\n        try:\n            choice = input(\"\\n\u662f\u5426\u91cd\u8bd5\uff1f(y/n): \").strip().lower()\n            return choice == 'y'\n        except Exception:\n            return False\n\ndef main():\n    \"\"\"\u4e3b\u51fd\u6570\"\"\"\n    try:\n        # \u4f7f\u7528\u56fa\u5b9a\u7684API\u5bc6\u94a5\n        api_key = \"_yV91xd1MYtZvKbOl2NLWfZh8PR_tJfIBnJ9j7ZZbFQ\"\n        \n        # \u521d\u59cb\u5316\u6e38\u620f\u5f15\u64ce\n        engine = GameEngine(api_key)\n        engine.main_loop()\n        \n    except ConfigError as e:\n        print(colored(f\"\u914d\u7f6e\u9519\u8bef: {e}\", 'red'))\n        sys.exit(1)\n    except Exception as e:\n        print(colored(f\"\u672a\u9884\u671f\u7684\u9519\u8bef: {e}\", 'red'))\n        sys.exit(99)\n\nif __name__ == \"__main__\":\n    main()\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u4f18\u5316\u4ee3\u7801\u7ed3\u6784\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u7248 v4.1\n\u6539\u8fdb\u5185\u5bb9\uff1a\n1. \u5b8c\u5584\u6240\u6709\u5e2e\u52a9\u547d\u4ee4\u529f\u80fd\n2. \u5f02\u6b65\u6587\u5b57\u52a8\u753b\u6548\u679c\n3. \u52a8\u6001\u8bed\u8a00\u6210\u5c31\u7cfb\u7edf\n4. \u5386\u53f2\u8bb0\u5f55\u67e5\u770b\u529f\u80fd\n5. \u589e\u5f3a\u8f93\u5165\u9a8c\u8bc1\u548c\u9519\u8bef\u5904\u7406\n\u4f9d\u8d56\uff1apip install openai python-dotenv termcolor filelock tenacity\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nimport asyncio\nfrom enum import Enum\nfrom pathlib import Path\nfrom typing import List, Dict, Optional, Tuple, TypedDict\nfrom termcolor import colored\nfrom openai import AsyncOpenAI, APIError\nfrom dotenv import load_dotenv\nfrom filelock import FileLock, Timeout\nfrom tenacity import (\n    retry, \n    stop_after_attempt, \n    wait_exponential, \n    retry_if_exception_type\n)\n\n# ...\uff08\u4fdd\u7559\u539f\u6709\u7c7b\u578b\u5b9a\u4e49\u548c\u5e38\u91cf\uff0c\u4fee\u6539\u4ee5\u4e0b\u90e8\u5206\uff09...\n\nclass GameStateManager:\n    def _load_initial_state(self) -> GameState:\n        \"\"\"\u6839\u636e\u914d\u7f6e\u8bed\u8a00\u52a0\u8f7d\u6210\u5c31\"\"\"\n        lang = ConfigManager().get('language').value\n        return {\n            'current_chapter': 0,\n            'story_history': [],\n            'decision_points': [],\n            'achievements': {\n                k: (v['name'][lang], False) \n                for k, v in ACHIEVEMENTS.items()\n            },\n            'achievement_progress': {\n                k: {'current': 0, 'target': v['target']} \n                for k, v in ACHIEVEMENTS.items()\n            }\n        }\n\nclass GameInterface:\n    async def _animate_text(self, text: str, speed: float = 0.03) -> None:\n        \"\"\"\u5f02\u6b65\u6587\u5b57\u52a8\u753b\u6548\u679c\"\"\"\n        for char in text:\n            print(char, end='', flush=True)\n            await asyncio.sleep(speed)\n        print()\n\n    async def show_history(self, history: List[str]) -> None:\n        \"\"\"\u663e\u793a\u5386\u53f2\u8bb0\u5f55\"\"\"\n        print(colored(\"\\n\ud83d\udcdc \u6545\u4e8b\u5386\u53f2\uff1a\", 'cyan'))\n        for i, entry in enumerate(history[-5:], 1):\n            print(f\"{i}. {entry.split('\\n')[0][:50]}...\")\n            \n    async def show_progress(self, progress: Dict) -> None:\n        \"\"\"\u663e\u793a\u6210\u5c31\u8fdb\u5ea6\"\"\"\n        lang = self.config.get('language').value\n        print(colored(\"\\n\ud83c\udfc5 \u6210\u5c31\u8fdb\u5ea6\uff1a\", 'cyan'))\n        for ach_id, data in ACHIEVEMENTS.items():\n            p = progress[ach_id]\n            print(f\"{data['name'][lang]}: {p['current']}/{p['target']}\")\n\n    async def get_choice(self, options: List[str]) -> int:\n        \"\"\"\u589e\u5f3a\u7684\u8f93\u5165\u5904\u7406\"\"\"\n        while True:\n            try:\n                choice = input(\"\\n\u8bf7\u9009\u62e9 (1-3/q\u9000\u51fa/help\u67e5\u770b\u547d\u4ee4): \").strip().lower()\n                \n                if choice == 'q':\n                    return 0\n                if choice == 'help':\n                    self._display_help()\n                    continue\n                if choice == 'save':\n                    return -1\n                if choice == 'history':\n                    return -2\n                if choice == 'progress':\n                    return -3\n                \n                # \u589e\u5f3a\u7684\u8f93\u5165\u5339\u914d\u903b\u8f91\n                matched = [\n                    idx for idx, opt in enumerate(options, 1)\n                    if choice in opt.lower() or str(idx) == choice\n                ]\n                \n                if len(matched) == 1:\n                    return matched[0]\n                    \n                raise ValueError\n            except ValueError:\n                print(colored(\"\u65e0\u6548\u8f93\u5165\uff0c\u8bf7\u8f93\u5165\u6570\u5b57\u6216\u5305\u542b\u9009\u9879\u5173\u952e\u8bcd\", 'yellow'))\n\nclass GameController:\n    async def _process_choice(self, choice: int, content: str) -> None:\n        \"\"\"\u5904\u7406\u6269\u5c55\u547d\u4ee4\"\"\"\n        if choice == 0:\n            await self._handle_exit()\n            return\n            \n        if choice == -1:  # \u4fdd\u5b58\u547d\u4ee4\n            await self._save_game()\n            return\n        if choice == -2:  # \u5386\u53f2\u67e5\u770b\n            await self.interface.show_history(self.state_mgr.state['story_history'])\n            return\n        if choice == -3:  # \u8fdb\u5ea6\u67e5\u770b\n            await self.interface.show_progress(\n                self.state_mgr.state['achievement_progress']\n            )\n            return\n            \n        # \u539f\u5904\u7406\u903b\u8f91\n        self.state_mgr.state['story_history'].append(content)\n        self.state_mgr.state['decision_points'].append(choice - 1)\n        self.state_mgr.state['current_chapter'] += 1\n        self.state_mgr.increment_progress('story_master')\n\n    async def _auto_save(self) -> None:\n        \"\"\"\u5e26\u786e\u8ba4\u63d0\u793a\u7684\u81ea\u52a8\u4fdd\u5b58\"\"\"\n        if ConfigManager().get('auto_save') and time.time() - self.last_save > ConfigManager().get('save_interval'):\n            print(colored(\"\\n\u26a0\ufe0f  \u68c0\u6d4b\u5230\u81ea\u52a8\u4fdd\u5b58\u65f6\u95f4\u95f4\u9694\u5df2\u5230\", 'yellow'))\n            choice = await self._confirm_prompt(\"\u662f\u5426\u7acb\u5373\u4fdd\u5b58\u8fdb\u5ea6\uff1f(y/n)\")\n            if choice:\n                await self._save_game()\n\n    async def _confirm_prompt(self, prompt: str) -> bool:\n        \"\"\"\u901a\u7528\u786e\u8ba4\u63d0\u793a\"\"\"\n        choice = input(colored(f\"{prompt}: \", 'yellow')).strip().lower()\n        return choice == 'y'\n\n    async def _save_game(self) -> None:\n        \"\"\"\u5e26\u91cd\u8bd5\u673a\u5236\u7684\u4fdd\u5b58\"\"\"\n        try:\n            with FileLock(\"save.lock\", timeout=5):\n                with open(\"save.json\", 'w', encoding='utf-8') as f:\n                    json.dump(self.state_mgr.state, f, ensure_ascii=False, indent=2)\n                self.last_save = time.time()\n                print(colored(\"\\n\u2705 \u6e38\u620f\u8fdb\u5ea6\u5df2\u4fdd\u5b58\uff01\", 'green'))\n        except Exception as e:\n            if await self._confirm_prompt(\"\u4fdd\u5b58\u5931\u8d25\uff0c\u662f\u5426\u91cd\u8bd5\uff1f(y/n)\"):\n                await self._save_game()\n\n    async def _retry_prompt(self) -> bool:\n        \"\"\"\u5e26\u5012\u8ba1\u65f6\u7684\u91cd\u8bd5\u63d0\u793a\"\"\"\n        for i in range(5, 0, -1):\n            print(colored(f\"\\r\u64cd\u4f5c\u5931\u8d25\uff0c{i}\u79d2\u540e\u81ea\u52a8\u91cd\u8bd5...\", 'yellow'), end='')\n            await asyncio.sleep(1)\n        print()\n        return True\n\n# ...\uff08\u4fdd\u7559\u5176\u4ed6\u539f\u6709\u4ee3\u7801\u7ed3\u6784\uff09...\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u5b8c\u5584\u9519\u8bef\u5904\u7406\uff0c\u63d0\u9ad8\u4ee3\u7801\u5065\u58ee\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n"
  ]
}