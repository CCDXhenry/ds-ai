{
  "version": 2,
  "timestamp": 1740020562.2843492,
  "files": {
    "C:\\project\\python_project\\Va\\ai\\demo1\\v2\\main.py": {
      "content": "\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u7248\n\u6539\u8fdb\u5185\u5bb9\uff1a\n1. \u589e\u5f3a\u578b\u8f93\u5165\u9a8c\u8bc1\n2. \u7cbe\u7ec6\u5316\u5f02\u5e38\u5904\u7406\n3. \u53ef\u914d\u7f6e\u63d0\u793a\u8bcd\u6a21\u677f\n4. \u6269\u5c55\u6210\u5c31\u7cfb\u7edf\n5. \u7c7b\u578b\u63d0\u793a\u5168\u8986\u76d6\n\u4f9d\u8d56\uff1apip install openai python-dotenv termcolor\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nimport re\nfrom pathlib import Path\nfrom typing import List, Dict, Optional, Tuple, Set\nfrom termcolor import colored\nimport openai\nfrom dotenv import load_dotenv\nfrom functools import lru_cache\n\n# \u73af\u5883\u53d8\u91cf\u52a0\u8f7d\u589e\u5f3a\nENV_LOADED = load_dotenv()\nif not ENV_LOADED:\n    print(colored(\"\u8b66\u544a\uff1a\u672a\u627e\u5230.env\u6587\u4ef6\", \"yellow\"))\n\nclass ConfigError(Exception):\n    \"\"\"\u81ea\u5b9a\u4e49\u914d\u7f6e\u5f02\u5e38\"\"\"\n\nclass StoryGenerationError(Exception):\n    \"\"\"\u81ea\u5b9a\u4e49\u6545\u4e8b\u751f\u6210\u5f02\u5e38\"\"\"\n\nclass UserConfig:\n    \"\"\"\u589e\u5f3a\u578b\u7528\u6237\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf\"\"\"\n    \n    VALIDATORS = {\n        'model': lambda x: x in {'gpt-3.5-turbo', 'gpt-4'},\n        'temperature': lambda x: 0.0 <= x <= 2.0,\n        'max_tokens': lambda x: 100 <= x <= 2000,\n        'auto_save_interval': lambda x: x >= 1\n    }\n    \n    def __init__(self, config_path: Path = Path(\"config.json\")):\n        self.config_path = config_path\n        self.default_config = {\n            'model': \"gpt-3.5-turbo\",\n            'temperature': 0.8,\n            'max_tokens': 1500,\n            'auto_save_interval': 5,\n            'max_history': 5,\n            'language': \"zh-CN\"\n        }\n        self.config = self.load_or_init_config()\n        \n    def load_or_init_config(self) -> Dict:\n        \"\"\"\u52a0\u8f7d\u6216\u521d\u59cb\u5316\u914d\u7f6e\u6587\u4ef6\"\"\"\n        try:\n            if self.config_path.exists():\n                with open(self.config_path, 'r', encoding='utf-8') as f:\n                    config = json.load(f)\n                    return {**self.default_config, **config}\n            return self.default_config.copy()\n        except Exception as e:\n            raise ConfigError(f\"\u914d\u7f6e\u52a0\u8f7d\u5931\u8d25: {e}\") from e\n            \n    def update_config(self, key: str, value: str) -> bool:\n        \"\"\"\u7c7b\u578b\u5b89\u5168\u7684\u914d\u7f6e\u66f4\u65b0\"\"\"\n        if key not in self.default_config:\n            raise ConfigError(f\"\u65e0\u6548\u914d\u7f6e\u9879: {key}\")\n            \n        original_type = type(self.default_config[key])\n        try:\n            converted = original_type(value)\n        except ValueError as e:\n            raise ConfigError(f\"\u7c7b\u578b\u8f6c\u6362\u5931\u8d25: {value} -> {original_type}\") from e\n            \n        if key in self.VALIDATORS and not self.VALIDATORS[key](converted):\n            raise ConfigError(f\"\u65e0\u6548\u503c: {converted} for {key}\")\n            \n        self.config[key] = converted\n        self._save_config()\n        return True\n        \n    def _save_config(self):\n        \"\"\"\u4fdd\u5b58\u914d\u7f6e\u5230\u6587\u4ef6\"\"\"\n        try:\n            with open(self.config_path, 'w', encoding='utf-8') as f:\n                json.dump(self.config, f, indent=2)\n        except Exception as e:\n            raise ConfigError(f\"\u914d\u7f6e\u4fdd\u5b58\u5931\u8d25: {e}\") from e\n\nclass StoryManager:\n    \"\"\"\u589e\u5f3a\u578b\u6545\u4e8b\u72b6\u6001\u7ba1\u7406\u5668\"\"\"\n    \n    def __init__(self, config: UserConfig):\n        self.story_history: List[Dict] = []\n        self.current_chapter = 1\n        self.config = config\n        self.decision_points: List[Dict] = []\n        self.achievements: Dict[str, Tuple[str, bool]] = {\n            'first_blood': ('\u9996\u6b21\u6218\u6597\u80dc\u5229', False),\n            'treasure_hunter': ('\u6536\u96c65\u4ef6\u5b9d\u7269', False),\n            'immortal': ('\u8fde\u7eed10\u7ae0\u65e0\u6b7b\u4ea1', False)\n        }\n        self._prompt_template = self._load_prompt_template()\n        self.last_save_time = 0.0\n        \n    def _load_prompt_template(self) -> str:\n        \"\"\"\u4ece\u6587\u4ef6\u52a0\u8f7d\u63d0\u793a\u8bcd\u6a21\u677f\"\"\"\n        template_path = Path(\"prompt_template.txt\")\n        try:\n            return template_path.read_text(encoding='utf-8')\n        except FileNotFoundError:\n            return \"\"\"\n            \u4f60\u662f\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5927\u5e08\uff0c\u8bf7\u751f\u6210\u5305\u542b\u4ee5\u4e0b\u8981\u7d20\u7684\u5192\u9669\u6545\u4e8b\uff1a\n            1. \u4e3b\u89d2\u62e5\u6709\u7279\u6b8a\u4f53\u8d28\u6216\u91d1\u624b\u6307\n            2. \u5305\u542b\u81f3\u5c11\u4e09\u4e2a\u521b\u65b0\u4fee\u70bc\u4f53\u7cfb\n            3. \u6bcf\u7ae0\u5fc5\u987b\u6709\u6218\u6597\u60c5\u8282\u548c\u5b9d\u7269\u83b7\u5f97\n            4. \u5305\u542b\u610f\u60f3\u4e0d\u5230\u7684\u5267\u60c5\u8f6c\u6298\n            5. \u5bf9\u573a\u666f\u548c\u529f\u6cd5\u8fdb\u884c\u8be6\u7ec6\u63cf\u5199\n            \u8bf7\u7528{language}\u4ee5{length}\u5b57\u5de6\u53f3\u7684\u6bb5\u843d\u5448\u73b0\uff0c\u7ed3\u5c3e\u7ed9\u51fa2-3\u4e2a\u9009\u62e9\u5206\u652f\n            \"\"\"\n        \n    def generate_story_prompt(self, user_input: Optional[str] = None) -> List[Dict]:\n        \"\"\"\u6784\u9020\u5e26\u4e0a\u4e0b\u6587\u7684\u63d0\u793a\u8bcd\"\"\"\n        system_content = self._prompt_template.format(\n            language=self.config.config['language'],\n            length=200\n        )\n        system_msg = {\"role\": \"system\", \"content\": system_content}\n        \n        messages = [system_msg]\n        messages += self._get_recent_history()\n        \n        if user_input:\n            sanitized_input = self._sanitize_input(user_input)\n            messages.append({\"role\": \"user\", \"content\": sanitized_input})\n        else:\n            messages.append({\"role\": \"user\", \"content\": \"\u8bf7\u5f00\u59cb\u65b0\u7684\u6545\u4e8b\"})\n            \n        return messages\n    \n    def _get_recent_history(self) -> List[Dict]:\n        \"\"\"\u83b7\u53d6\u6700\u8fd1\u7684\u4e0a\u4e0b\u6587\u5386\u53f2\"\"\"\n        max_entries = self.config.config['max_history'] * 2\n        return self.story_history[-max_entries:]\n    \n    @staticmethod\n    def _sanitize_input(text: str) -> str:\n        \"\"\"\u8f93\u5165\u5185\u5bb9\u6d88\u6bd2\"\"\"\n        text = re.sub(r'[<>{}[\\]]', '', text)  # \u79fb\u9664\u7279\u6b8a\u7b26\u53f7\n        return text[:500]  # \u9650\u5236\u8f93\u5165\u957f\u5ea6\n        \n    def save_progress(self, filename: str = \"autosave.json\") -> None:\n        \"\"\"\u589e\u5f3a\u578b\u5b58\u6863\u529f\u80fd\"\"\"\n        if time.time() - self.last_save_time < 60:  # \u9650\u5236\u4fdd\u5b58\u9891\u7387\n            return\n            \n        save_data = {\n            \"chapter\": self.current_chapter,\n            \"history\": self.story_history,\n            \"decisions\": self.decision_points,\n            \"achievements\": [k for k, v in self.achievements.items() if v[1]]\n        }\n        \n        try:\n            with open(filename, 'w', encoding='utf-8') as f:\n                json.dump(save_data, f, ensure_ascii=False)\n            self.last_save_time = time.time()\n        except PermissionError as e:\n            raise StoryGenerationError(f\"\u6587\u4ef6\u6743\u9650\u9519\u8bef: {e}\") from e\n        except IOError as e:\n            raise StoryGenerationError(f\"\u4fdd\u5b58\u5931\u8d25: {e}\") from e\n\nclass OpenAIClient:\n    \"\"\"\u589e\u5f3a\u578bAPI\u5ba2\u6237\u7aef\"\"\"\n    \n    RETRYABLE_ERRORS = (\n        openai.error.RateLimitError,\n        openai.error.APIConnectionError,\n        openai.error.Timeout\n    )\n    \n    def __init__(self, config: UserConfig):\n        self.config = config\n        openai.api_key = os.getenv(\"OPENAI_API_KEY\", \"\")\n        \n    def generate_story(self, messages: List[Dict]) -> str:\n        \"\"\"\u5e26\u6307\u6570\u9000\u907f\u7684\u91cd\u8bd5\u673a\u5236\"\"\"\n        max_retries = 5\n        base_delay = 1.0\n        \n        for attempt in range(max_retries):\n            try:\n                response = openai.ChatCompletion.create(\n                    model=self.config.config['model'],\n                    messages=messages,\n                    temperature=self.config.config['temperature'],\n                    max_tokens=self.config.config['max_tokens'],\n                    request_timeout=30\n                )\n                return response.choices[0].message['content'].strip()\n            except self.RETRYABLE_ERRORS as e:\n                delay = base_delay * (2 ** attempt)\n                print(colored(f\"API\u9519\u8bef: {e}, {delay}\u79d2\u540e\u91cd\u8bd5...\", \"yellow\"))\n                time.sleep(delay)\n            except openai.error.InvalidRequestError as e:\n                raise StoryGenerationError(f\"\u65e0\u6548\u8bf7\u6c42: {e}\") from e\n        raise StoryGenerationError(f\"API\u8bf7\u6c42\u5931\u8d25\uff0c\u5df2\u91cd\u8bd5{max_retries}\u6b21\")\n\nclass StoryFormatter:\n    \"\"\"\u589e\u5f3a\u578b\u6545\u4e8b\u683c\u5f0f\u5316\"\"\"\n    \n    COLOR_SCHEMES = {\n        'zh-CN': {'text': 'white', 'choices': 'cyan'},\n        'en-US': {'text': 'green', 'choices': 'yellow'}\n    }\n    \n    @staticmethod\n    @lru_cache(maxsize=100)\n    def colorize(text: str, language: str = 'zh-CN') -> str:\n        \"\"\"\u5e26\u7f13\u5b58\u7684\u989c\u8272\u683c\u5f0f\u5316\"\"\"\n        scheme = StoryFormatter.COLOR_SCHEMES.get(language, {})\n        return colored(text, scheme.get('text', 'white'))\n    \n    @classmethod\n    def display_story(cls, content: str, chapter: int, config: UserConfig) -> List[str]:\n        \"\"\"\u89e3\u6790\u6545\u4e8b\u5185\u5bb9\u5e76\u8fd4\u56de\u9009\u9879\u5217\u8868\"\"\"\n        print(\"\\n\" + colored(\"=\"*50, 'blue'))\n        print(colored(f\"\ud83d\udcd6 \u7b2c{chapter}\u7ae0 \ud83d\udcd6\", 'yellow', attrs=['bold']))\n        print(colored(\"-\"*50, 'blue'))\n        \n        # \u5206\u5272\u6b63\u6587\u548c\u9009\u9879\n        parts = re.split(r'\\n(?=\u9009\u62e9\\w?:)', content)\n        body = parts[0]\n        options = parts[1:] if len(parts) > 1 else []\n        \n        # \u683c\u5f0f\u5316\u6b63\u6587\n        paragraphs = [p.strip() for p in body.split('\\n') if p.strip()]\n        for para in paragraphs:\n            print(cls.colorize(para, config.config['language']))\n            \n        # \u5904\u7406\u9009\u9879\n        valid_options = []\n        for opt in options:\n            if re.match(r'^\u9009\u62e9[1-3]:', opt):\n                print(colored(opt, cls.COLOR_SCHEMES[config.config['language']]['choices']))\n                valid_options.append(opt)\n                \n        print(colored(\"=\"*50, 'blue'))\n        return valid_options\n\nclass InputValidator:\n    \"\"\"\u8f93\u5165\u9a8c\u8bc1\u589e\u5f3a\u7c7b\"\"\"\n    \n    @staticmethod\n    def validate_choice(input_str: str, options: List[str]) -> int:\n        \"\"\"\u9a8c\u8bc1\u7528\u6237\u9009\u62e9\u6709\u6548\u6027\"\"\"\n        if not input_str.isdigit():\n            raise ValueError(\"\u8bf7\u8f93\u5165\u6570\u5b57\")\n            \n        choice = int(input_str)\n        if 1 <= choice <= len(options):\n            return choice\n        raise ValueError(f\"\u65e0\u6548\u9009\u62e9\uff0c\u8bf7\u8f93\u51651~{len(options)}\u4e4b\u95f4\u7684\u6570\u5b57\")\n        \n    @staticmethod\n    def get_input_with_timeout(prompt: str, timeout: float = 30.0) -> str:\n        \"\"\"\u5e26\u8d85\u65f6\u7684\u8f93\u5165\u83b7\u53d6\"\"\"\n        from threading import Timer\n        import queue\n        \n        q = queue.Queue()\n        t = Timer(timeout, q.put, args=('',))\n        t.start()\n        \n        print(colored(prompt, 'green'), end='', flush=True)\n        try:\n            return q.get(timeout=timeout)\n        except queue.Empty:\n            return ''\n        finally:\n            t.cancel()\n\n# \u4e3b\u7a0b\u5e8f\u5165\u53e3\uff08\u5b8c\u6574\u5b9e\u73b0\u9700\u6dfb\u52a0\u6e38\u620f\u5faa\u73af\u903b\u8f91\uff09",
      "hash": "342133e4060bb0323901665c2a2d44b5"
    }
  },
  "history": [],
  "user_feedback": [
    "\u521b\u5efa\u4e00\u4e2a\u8c03\u7528openai\u63a5\u53e3\u7684\u7384\u5e7b\u5c0f\u8bf4\u5386\u9669\u8bb0\uff0c\u901a\u8fc7\u5bf9\u8bdd\u7684\u5f62\u5f0f\uff0c\u6765\u63a8\u52a8\u6545\u4e8b\u7684\u524d\u8fdb\uff0c\u6545\u4e8b\u8981\u6709\u723d\u70b9\u6709\u521b\u65b0",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\n\u4f9d\u8d56\uff1apip install openai python-dotenv\n\"\"\"\n\nimport os\nimport sys\nimport time\nfrom typing import List, Dict\nimport openai\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nclass StoryManager:\n    \"\"\"\u7ba1\u7406\u6545\u4e8b\u751f\u6210\u72b6\u6001\u548c\u4e0a\u4e0b\u6587\"\"\"\n    \n    def __init__(self):\n        self.story_history: List[Dict] = []\n        self.current_chapter = 1\n        self.max_retries = 3\n        self.base_prompt = \"\"\"\n            \u4f60\u662f\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5927\u5e08\uff0c\u8bf7\u751f\u6210\u5305\u542b\u4ee5\u4e0b\u8981\u7d20\u7684\u5192\u9669\u6545\u4e8b\uff1a\n            1. \u4e3b\u89d2\u62e5\u6709\u7279\u6b8a\u4f53\u8d28\u6216\u91d1\u624b\u6307\n            2. \u5305\u542b\u81f3\u5c11\u4e09\u4e2a\u521b\u65b0\u4fee\u70bc\u4f53\u7cfb\n            3. \u6bcf\u7ae0\u5fc5\u987b\u6709\u6218\u6597\u60c5\u8282\u548c\u5b9d\u7269\u83b7\u5f97\n            4. \u5305\u542b\u610f\u60f3\u4e0d\u5230\u7684\u5267\u60c5\u8f6c\u6298\n            5. \u5bf9\u573a\u666f\u548c\u529f\u6cd5\u8fdb\u884c\u8be6\u7ec6\u63cf\u5199\n            \u8bf7\u7528\u4e2d\u6587\u4ee5150\u5b57\u5de6\u53f3\u7684\u6bb5\u843d\u5448\u73b0\uff0c\u7ed3\u5c3e\u7ed9\u51fa2-3\u4e2a\u9009\u62e9\u5206\u652f\n        \"\"\"\n        \n    def generate_story_prompt(self, user_input: str = None) -> List[Dict]:\n        \"\"\"\u6784\u9020\u5e26\u4e0a\u4e0b\u6587\u7684\u63d0\u793a\u8bcd\"\"\"\n        system_msg = {\n            \"role\": \"system\",\n            \"content\": f\"{self.base_prompt} \u5f53\u524d\u662f\u7b2c{self.current_chapter}\u7ae0\uff0c\u4fdd\u6301\u6545\u4e8b\u8fde\u8d2f\u6027\u3002\"\n        }\n        \n        messages = [system_msg]\n        \n        # \u6dfb\u52a0\u4e0a\u4e0b\u6587\u5386\u53f2\n        if self.story_history:\n            messages += self.story_history[-4:]  # \u4fdd\u6301\u6700\u8fd13\u8f6e\u5bf9\u8bdd\n        \n        # \u6dfb\u52a0\u7528\u6237\u8f93\u5165\n        if user_input:\n            messages.append({\"role\": \"user\", \"content\": user_input})\n        else:\n            messages.append({\"role\": \"user\", \"content\": \"\u8bf7\u5f00\u59cb\u65b0\u7684\u6545\u4e8b\"})\n            \n        return messages\n\nclass OpenAIClient:\n    \"\"\"\u5904\u7406OpenAI API\u4ea4\u4e92\"\"\"\n    \n    def __init__(self):\n        self.model = \"gpt-3.5-turbo\"\n        self.temperature = 0.8\n        self.max_tokens = 1500\n        \n    def generate_story(self, messages: List[Dict]) -> str:\n        \"\"\"\u8c03\u7528OpenAI\u751f\u6210\u6545\u4e8b\u5185\u5bb9\"\"\"\n        for _ in range(3):  # \u91cd\u8bd5\u673a\u5236\n            try:\n                response = openai.ChatCompletion.create(\n                    model=self.model,\n                    messages=messages,\n                    temperature=self.temperature,\n                    max_tokens=self.max_tokens\n                )\n                return response.choices[0].message['content'].strip()\n            except Exception as e:\n                print(f\"API\u9519\u8bef: {e}, \u91cd\u8bd5\u4e2d...\")\n                time.sleep(2)\n        return \"\u6545\u4e8b\u751f\u6210\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\"\n\ndef display_story(content: str):\n    \"\"\"\u7f8e\u5316\u6545\u4e8b\u663e\u793a\"\"\"\n    print(\"\\n\" + \"=\"*50)\n    print(f\"\ud83d\udcd6 \u7b2c{story_mgr.current_chapter}\u7ae0 \ud83d\udcd6\")\n    print(\"-\"*50)\n    print(content.replace(\". \", \".\\n\"))\n    print(\"=\"*50 + \"\\n\")\n\ndef main():\n    \"\"\"\u4e3b\u7a0b\u5e8f\u5165\u53e3\"\"\"\n    story_mgr = StoryManager()\n    ai_client = OpenAIClient()\n    \n    print(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\")\n    print(\"\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u6570\u5b57\uff09\u6216\u81ea\u7531\u8f93\u5165\uff0c\u8f93\u5165q\u9000\u51fa\\n\")\n    \n    user_input = None\n    while True:\n        # \u751f\u6210\u6545\u4e8b\u5185\u5bb9\n        messages = story_mgr.generate_story_prompt(user_input)\n        story_content = ai_client.generate_story(messages)\n        \n        # \u5904\u7406\u751f\u6210\u5931\u8d25\u7684\u60c5\u51b5\n        if \"\u5931\u8d25\" in story_content:\n            print(story_content)\n            break\n            \n        display_story(story_content)\n        \n        # \u8bb0\u5f55\u5386\u53f2\n        story_mgr.story_history.extend([\n            {\"role\": \"assistant\", \"content\": story_content},\n            {\"role\": \"user\", \"content\": user_input} if user_input else None\n        ])\n        \n        # \u83b7\u53d6\u7528\u6237\u8f93\u5165\n        choice = input(\"\u8bf7\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u8f93\u5165\u6570\u5b57\u6216\u81ea\u5b9a\u4e49\u5185\u5bb9\uff09\uff1a\").strip()\n        if choice.lower() == 'q':\n            print(\"\\n\u5192\u9669\u7ed3\u675f\uff0c\u671f\u5f85\u4e0b\u6b21\u518d\u89c1\uff01\")\n            break\n            \n        user_input = f\"\u7528\u6237\u9009\u62e9\uff1a{choice}\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u9009\u62e9\u7ee7\u7eed\u53d1\u5c55\u6545\u4e8b\uff0c\u4fdd\u6301\u8282\u594f\u7d27\u51d1\uff0c\u5e76\u6dfb\u52a0\u65b0\u7684\u51b2\u7a81\u548c\u5947\u9047\u3002\"\n        story_mgr.current_chapter += 1\n        \nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\n\u64cd\u4f5c\u5df2\u4e2d\u65ad\")\n        sys.exit(0)\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u6269\u5c55\u73b0\u6709\u529f\u80fd\uff0c\u6dfb\u52a0\u65b0\u7279\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n"
  ]
}