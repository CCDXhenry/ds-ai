{
  "version": 4,
  "timestamp": 1740022950.717522,
  "files": {
    "C:\\project\\python_project\\Va\\ai\\demo1\\v4\\main.py": {
      "content": "\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u7248 v3.0\n\u6539\u8fdb\u5185\u5bb9\uff1a\n1. \u6a21\u5757\u5316\u67b6\u6784\u8bbe\u8ba1\n2. \u72b6\u6001\u6a21\u5f0f\u7ba1\u7406\u6e38\u620f\u6d41\u7a0b\n3. \u589e\u5f3a\u8f93\u5165\u9a8c\u8bc1\u548c\u7c7b\u578b\u5b89\u5168\n4. \u6539\u8fdb\u914d\u7f6e\u70ed\u91cd\u8f7d\u673a\u5236\n\u4f9d\u8d56\uff1apip install openai python-dotenv termcolor filelock tenacity\n\"\"\"\n\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nimport time\nimport json\nfrom pathlib import Path\nfrom typing import List, Dict, Optional, Tuple, TypedDict\nfrom termcolor import colored\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nfrom filelock import FileLock, Timeout\nfrom tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type\n\n# \u7c7b\u578b\u5b9a\u4e49\nclass GameState(TypedDict):\n    current_chapter: int\n    story_history: List[str]\n    decision_points: List[int]\n    achievements: Dict[str, Tuple[str, bool]]\n    achievement_progress: Dict[str, Dict[str, int]]\n\nclass StoryConfig(TypedDict):\n    language: str\n    auto_save: bool\n    save_interval: int\n    timeout: int\n    model: str\n\n# \u5f02\u5e38\u7c7b\nclass StoryGenerationError(Exception):\n    \"\"\"\u6545\u4e8b\u751f\u6210\u5f02\u5e38\"\"\"\n\nclass ConfigError(Exception):\n    \"\"\"\u914d\u7f6e\u76f8\u5173\u5f02\u5e38\"\"\"\n\nclass SaveError(Exception):\n    \"\"\"\u4fdd\u5b58\u5f02\u5e38\"\"\"\n\n# \u5e38\u91cf\nDEFAULT_CONFIG: StoryConfig = {\n    'language': 'zh-CN',\n    'auto_save': True,\n    'save_interval': 300,\n    'timeout': 30,\n    'model': 'gpt-3.5-turbo'\n}\n\nACHIEVEMENTS = {\n    'treasure_hunter': {\n        'name': {'zh-CN': '\u5bfb\u5b9d\u8fbe\u4eba', 'en-US': 'Treasure Hunter'},\n        'target': 5\n    },\n    'story_master': {\n        'name': {'zh-CN': '\u6545\u4e8b\u5927\u5e08', 'en-US': 'Story Master'},\n        'target': 10\n    }\n}\n\n# \u5de5\u5177\u51fd\u6570\ndef validate_response(content: str) -> bool:\n    \"\"\"\u9a8c\u8bc1OpenAI\u54cd\u5e94\u683c\u5f0f\"\"\"\n    return \"\u9009\u9879\uff1a\" in content and len(content.split(\"\u9009\u9879\uff1a\")[1].split(\"\\n\")) >= 3\n\ndef format_story_content(content: str) -> str:\n    \"\"\"\u6807\u51c6\u5316\u6545\u4e8b\u5185\u5bb9\u683c\u5f0f\"\"\"\n    content = content.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n    parts = content.split(\"\u9009\u9879\uff1a\", 1)\n    if len(parts) != 2:\n        raise StoryGenerationError(\"\u65e0\u6548\u7684\u6545\u4e8b\u683c\u5f0f\")\n    \n    story, options = parts\n    options = [o.strip() for o in options.split(\"\\n\") if o.strip()]\n    return f\"{story.strip()}\\n\\n\u9009\u9879\uff1a\\n\" + \"\\n\".join(options[:3])\n\n# \u7ba1\u7406\u5668\u7c7b\nclass ConfigManager:\n    \"\"\"\u914d\u7f6e\u7ba1\u7406\u5668\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\"\"\"\n    _instance = None\n    \n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n            cls._instance._load_config()\n        return cls._instance\n    \n    def _load_config(self) -> None:\n        \"\"\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\"\"\"\n        self.config_path = Path(\"config.json\")\n        try:\n            if self.config_path.exists():\n                with open(self.config_path, 'r', encoding='utf-8') as f:\n                    self.config = {**DEFAULT_CONFIG, **json.load(f)}\n            else:\n                self.config = DEFAULT_CONFIG\n        except Exception as e:\n            raise ConfigError(f\"\u914d\u7f6e\u52a0\u8f7d\u5931\u8d25: {e}\")\n\n    def get(self, key: str, default=None):\n        \"\"\"\u83b7\u53d6\u914d\u7f6e\u9879\"\"\"\n        return self.config.get(key, default)\n    \n    def reload(self) -> None:\n        \"\"\"\u70ed\u91cd\u8f7d\u914d\u7f6e\"\"\"\n        self._load_config()\n\nclass GameStateManager:\n    \"\"\"\u6e38\u620f\u72b6\u6001\u7ba1\u7406\u5668\"\"\"\n    def __init__(self):\n        self.state: GameState = {\n            'current_chapter': 0,\n            'story_history': [],\n            'decision_points': [],\n            'achievements': {k: (v['name']['zh-CN'], False) for k, v in ACHIEVEMENTS.items()},\n            'achievement_progress': {k: {'current': 0, 'target': v['target']} \n                                   for k, v in ACHIEVEMENTS.items()}\n        }\n    \n    def update_achievements(self) -> List[str]:\n        \"\"\"\u66f4\u65b0\u6210\u5c31\u72b6\u6001\"\"\"\n        unlocked = []\n        for ach_id, progress in self.state['achievement_progress'].items():\n            if progress['current'] >= progress['target'] and not self.state['achievements'][ach_id][1]:\n                self.state['achievements'][ach_id] = (\n                    self.state['achievements'][ach_id][0],\n                    True\n                )\n                unlocked.append(ach_id)\n        return unlocked\n\n    def increment_progress(self, ach_id: str) -> None:\n        \"\"\"\u589e\u52a0\u6210\u5c31\u8fdb\u5ea6\"\"\"\n        if ach_id in self.state['achievement_progress']:\n            self.state['achievement_progress'][ach_id]['current'] = min(\n                self.state['achievement_progress'][ach_id]['current'] + 1,\n                self.state['achievement_progress'][ach_id]['target']\n            )\n\n# \u6838\u5fc3\u5f15\u64ce\nclass StoryEngine:\n    \"\"\"\u6545\u4e8b\u751f\u6210\u5f15\u64ce\"\"\"\n    def __init__(self, api_key: str):\n        self.client = OpenAI(api_key=api_key)\n        self.config = ConfigManager()\n        \n    @retry(\n        stop=stop_after_attempt(3),\n        wait=wait_exponential(multiplier=2, min=4, max=60),\n        retry=retry_if_exception_type(StoryGenerationError)\n    )\n    def generate(self, chapter: int, history: List[str]) -> str:\n        \"\"\"\u751f\u6210\u65b0\u7684\u6545\u4e8b\u7ae0\u8282\"\"\"\n        try:\n            prompt = self._build_prompt(chapter, history)\n            response = self.client.chat.completions.create(\n                model=self.config.get('model'),\n                messages=[\n                    {\"role\": \"system\", \"content\": self._system_prompt()},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                temperature=0.7,\n                max_tokens=500\n            )\n            content = response.choices[0].message.content\n            return format_story_content(content)\n        except Exception as e:\n            raise StoryGenerationError(f\"\u751f\u6210\u5931\u8d25: {str(e)}\")\n\n    def _system_prompt(self) -> str:\n        \"\"\"\u751f\u6210\u7cfb\u7edf\u63d0\u793a\u8bed\"\"\"\n        return (\n            \"\u4f60\u662f\u4e00\u4f4d\u4e13\u4e1a\u7384\u5e7b\u5c0f\u8bf4\u4f5c\u5bb6\uff0c\u8bf7\u4e25\u683c\u6309\u4ee5\u4e0b\u683c\u5f0f\u521b\u4f5c\uff1a\\n\"\n            \"1. \u4e00\u6bb5\u751f\u52a8\u7684\u573a\u666f\u63cf\u8ff0\uff083-5\u53e5\uff09\\n\"\n            \"2. \u7a7a\u4e00\u884c\u540e\u5199'\u9009\u9879\uff1a'\\n\"\n            \"3. \u4e09\u4e2a\u9009\u9879\uff08\u6bcf\u884c\u4e00\u4e2a\uff0c\u7f16\u53f71-3\uff09\\n\\n\"\n            \"\u793a\u4f8b\uff1a\\n\"\n            \"\u6708\u5149\u4e0b\u7684\u53e4\u5bfa\u6cdb\u7740\u5e7d\u84dd\u5149\u8292\uff0c\u77f3\u7891\u4e0a\u7684\u7b26\u6587\u7a81\u7136\u4eae\u8d77...\\n\\n\"\n            \"\u9009\u9879\uff1a\\n\"\n            \"\u89e6\u6478\u77f3\u7891\u4e0a\u7684\u7b26\u6587\\n\"\n            \"\u7ed5\u5f00\u77f3\u7891\u63a2\u7d22\u540e\u9662\\n\"\n            \"\u7528\u7b26\u5492\u63a2\u6d4b\u5468\u56f4\u73af\u5883\"\n        )\n\n    def _build_prompt(self, chapter: int, history: List[str]) -> str:\n        \"\"\"\u6784\u5efa\u7528\u6237\u63d0\u793a\u8bed\"\"\"\n        prompt = f\"\u5f53\u524d\u7ae0\u8282\uff1a{chapter + 1}\\n\"\n        if history:\n            prompt += f\"\\n\u524d\u60c5\u63d0\u8981\uff1a\\n{history[-1]}\\n\"\n        return prompt\n\n# \u7528\u6237\u754c\u9762\nclass GameInterface:\n    \"\"\"\u6e38\u620f\u754c\u9762\u5904\u7406\u5668\"\"\"\n    @staticmethod\n    def display_story(content: str, chapter: int) -> List[str]:\n        \"\"\"\u663e\u793a\u6545\u4e8b\u5185\u5bb9\u5e76\u8fd4\u56de\u9009\u9879\"\"\"\n        print(colored(f\"\\n\u7b2c {chapter + 1} \u7ae0\", 'cyan'))\n        print(\"=\" * 50)\n        \n        story_part, options_part = content.split(\"\\n\u9009\u9879\uff1a\")\n        print(story_part.strip())\n        \n        options = [o.strip() for o in options_part.split(\"\\n\") if o.strip()]\n        print(\"\\n\u9009\u9879\uff1a\")\n        for i, opt in enumerate(options[:3], 1):\n            print(colored(f\"{i}. {opt}\", 'green'))\n            \n        return options[:3]\n\n    @staticmethod\n    def display_achievement(ach_id: str) -> None:\n        \"\"\"\u663e\u793a\u6210\u5c31\u89e3\u9501\"\"\"\n        config = ConfigManager()\n        lang = config.get('language', 'zh-CN')\n        name = ACHIEVEMENTS[ach_id]['name'][lang]\n        print(colored(f\"\ud83c\udfc6 {name} \u5df2\u89e3\u9501\uff01\", 'magenta'))\n\n    @classmethod\n    def get_choice(cls, options: List[str]) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u9009\u62e9\"\"\"\n        while True:\n            try:\n                choice = input(\"\\n\u8bf7\u9009\u62e9 (1-3\uff0cq\u9000\u51fa): \").strip().lower()\n                if choice == 'q':\n                    return 0\n                \n                choice = int(choice)\n                if 1 <= choice <= len(options):\n                    return choice\n                \n                raise ValueError\n            except ValueError:\n                print(colored(\"\u8bf7\u8f93\u51651-3\u7684\u6709\u6548\u6570\u5b57\", 'yellow'))\n\n# \u4e3b\u63a7\u5236\u5668\nclass GameController:\n    \"\"\"\u6e38\u620f\u4e3b\u63a7\u5236\u5668\"\"\"\n    def __init__(self, api_key: str):\n        self.engine = StoryEngine(api_key)\n        self.state_mgr = GameStateManager()\n        self.interface = GameInterface()\n        self.last_save = time.time()\n        self.running = True\n        \n    def run(self) -> None:\n        \"\"\"\u542f\u52a8\u6e38\u620f\u4e3b\u5faa\u73af\"\"\"\n        print(colored(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\", 'cyan'))\n        try:\n            while self.running:\n                self._game_loop()\n        except KeyboardInterrupt:\n            self._handle_exit()\n            \n    def _game_loop(self) -> None:\n        \"\"\"\u5355\u6b21\u6e38\u620f\u5faa\u73af\"\"\"\n        try:\n            content = self.engine.generate(\n                self.state_mgr.state['current_chapter'],\n                self.state_mgr.state['story_history']\n            )\n            \n            options = self.interface.display_story(\n                content, \n                self.state_mgr.state['current_chapter']\n            )\n            \n            choice = self.interface.get_choice(options)\n            self._process_choice(choice, content)\n            \n            self._check_achievements()\n            self._auto_save()\n            \n        except StoryGenerationError as e:\n            print(colored(f\"\u6545\u4e8b\u751f\u6210\u9519\u8bef: {e}\", 'red'))\n            if not self._retry_prompt():\n                self.running = False\n\n    def _process_choice(self, choice: int, content: str) -> None:\n        \"\"\"\u5904\u7406\u7528\u6237\u9009\u62e9\"\"\"\n        if choice == 0:\n            self._handle_exit()\n            return\n            \n        self.state_mgr.state['story_history'].append(content)\n        self.state_mgr.state['decision_points'].append(choice - 1)\n        self.state_mgr.state['current_chapter'] += 1\n        self.state_mgr.increment_progress('story_master')\n\n    def _check_achievements(self) -> None:\n        \"\"\"\u68c0\u67e5\u5e76\u663e\u793a\u6210\u5c31\"\"\"\n        unlocked = self.state_mgr.update_achievements()\n        for ach_id in unlocked:\n            self.interface.display_achievement(ach_id)\n\n    def _auto_save(self) -> None:\n        \"\"\"\u81ea\u52a8\u4fdd\u5b58\u6e38\u620f\"\"\"\n        if ConfigManager().get('auto_save') and time.time() - self.last_save > ConfigManager().get('save_interval'):\n            self._save_game()\n\n    def _save_game(self) -> None:\n        \"\"\"\u4fdd\u5b58\u6e38\u620f\u8fdb\u5ea6\"\"\"\n        try:\n            with FileLock(\"save.lock\", timeout=5):\n                with open(\"save.json\", 'w', encoding='utf-8') as f:\n                    json.dump(self.state_mgr.state, f, ensure_ascii=False, indent=2)\n                self.last_save = time.time()\n        except Exception as e:\n            raise SaveError(f\"\u4fdd\u5b58\u5931\u8d25: {str(e)}\")\n\n    def _retry_prompt(self) -> bool:\n        \"\"\"\u91cd\u8bd5\u63d0\u793a\"\"\"\n        choice = input(colored(\"\u662f\u5426\u91cd\u8bd5\uff1f(y/n): \", 'yellow')).strip().lower()\n        return choice == 'y'\n\n    def _handle_exit(self) -> None:\n        \"\"\"\u5904\u7406\u9000\u51fa\u903b\u8f91\"\"\"\n        self.running = False\n        if ConfigManager().get('auto_save'):\n            self._save_game()\n        print(colored(\"\\n\u611f\u8c22\u6e38\u73a9\uff01\", 'cyan'))\n\ndef main():\n    \"\"\"\u7a0b\u5e8f\u5165\u53e3\u70b9\"\"\"\n    try:\n        # \u521d\u59cb\u5316\u914d\u7f6e\n        ConfigManager()\n        \n        # \u4f7f\u7528\u56fa\u5b9a\u7684API\u5bc6\u94a5\n        controller = GameController(api_key=\"_yV91xd1MYtZvKbOl2NLWfZh8PR_tJfIBnJ9j7ZZbFQ\")\n        controller.run()\n        \n    except Exception as e:\n        print(colored(f\"\u81f4\u547d\u9519\u8bef: {str(e)}\", 'red'))\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
      "hash": "7086ea96b40ccb3a7ca081c94ffa0dbc"
    }
  },
  "history": [],
  "user_feedback": [
    "\u521b\u5efa\u4e00\u4e2a\u8c03\u7528openai\u63a5\u53e3\u7684\u7384\u5e7b\u5c0f\u8bf4\u5386\u9669\u8bb0\uff0c\u901a\u8fc7\u5bf9\u8bdd\u7684\u5f62\u5f0f\uff0c\u6765\u63a8\u52a8\u6545\u4e8b\u7684\u524d\u8fdb\uff0c\u6545\u4e8b\u8981\u6709\u723d\u70b9\u6709\u521b\u65b0",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\n\u4f9d\u8d56\uff1apip install openai python-dotenv\n\"\"\"\n\nimport os\nimport sys\nimport time\nfrom typing import List, Dict\nimport openai\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nclass StoryManager:\n    \"\"\"\u7ba1\u7406\u6545\u4e8b\u751f\u6210\u72b6\u6001\u548c\u4e0a\u4e0b\u6587\"\"\"\n    \n    def __init__(self):\n        self.story_history: List[Dict] = []\n        self.current_chapter = 1\n        self.max_retries = 3\n        self.base_prompt = \"\"\"\n            \u4f60\u662f\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5927\u5e08\uff0c\u8bf7\u751f\u6210\u5305\u542b\u4ee5\u4e0b\u8981\u7d20\u7684\u5192\u9669\u6545\u4e8b\uff1a\n            1. \u4e3b\u89d2\u62e5\u6709\u7279\u6b8a\u4f53\u8d28\u6216\u91d1\u624b\u6307\n            2. \u5305\u542b\u81f3\u5c11\u4e09\u4e2a\u521b\u65b0\u4fee\u70bc\u4f53\u7cfb\n            3. \u6bcf\u7ae0\u5fc5\u987b\u6709\u6218\u6597\u60c5\u8282\u548c\u5b9d\u7269\u83b7\u5f97\n            4. \u5305\u542b\u610f\u60f3\u4e0d\u5230\u7684\u5267\u60c5\u8f6c\u6298\n            5. \u5bf9\u573a\u666f\u548c\u529f\u6cd5\u8fdb\u884c\u8be6\u7ec6\u63cf\u5199\n            \u8bf7\u7528\u4e2d\u6587\u4ee5150\u5b57\u5de6\u53f3\u7684\u6bb5\u843d\u5448\u73b0\uff0c\u7ed3\u5c3e\u7ed9\u51fa2-3\u4e2a\u9009\u62e9\u5206\u652f\n        \"\"\"\n        \n    def generate_story_prompt(self, user_input: str = None) -> List[Dict]:\n        \"\"\"\u6784\u9020\u5e26\u4e0a\u4e0b\u6587\u7684\u63d0\u793a\u8bcd\"\"\"\n        system_msg = {\n            \"role\": \"system\",\n            \"content\": f\"{self.base_prompt} \u5f53\u524d\u662f\u7b2c{self.current_chapter}\u7ae0\uff0c\u4fdd\u6301\u6545\u4e8b\u8fde\u8d2f\u6027\u3002\"\n        }\n        \n        messages = [system_msg]\n        \n        # \u6dfb\u52a0\u4e0a\u4e0b\u6587\u5386\u53f2\n        if self.story_history:\n            messages += self.story_history[-4:]  # \u4fdd\u6301\u6700\u8fd13\u8f6e\u5bf9\u8bdd\n        \n        # \u6dfb\u52a0\u7528\u6237\u8f93\u5165\n        if user_input:\n            messages.append({\"role\": \"user\", \"content\": user_input})\n        else:\n            messages.append({\"role\": \"user\", \"content\": \"\u8bf7\u5f00\u59cb\u65b0\u7684\u6545\u4e8b\"})\n            \n        return messages\n\nclass OpenAIClient:\n    \"\"\"\u5904\u7406OpenAI API\u4ea4\u4e92\"\"\"\n    \n    def __init__(self):\n        self.model = \"gpt-3.5-turbo\"\n        self.temperature = 0.8\n        self.max_tokens = 1500\n        \n    def generate_story(self, messages: List[Dict]) -> str:\n        \"\"\"\u8c03\u7528OpenAI\u751f\u6210\u6545\u4e8b\u5185\u5bb9\"\"\"\n        for _ in range(3):  # \u91cd\u8bd5\u673a\u5236\n            try:\n                response = openai.ChatCompletion.create(\n                    model=self.model,\n                    messages=messages,\n                    temperature=self.temperature,\n                    max_tokens=self.max_tokens\n                )\n                return response.choices[0].message['content'].strip()\n            except Exception as e:\n                print(f\"API\u9519\u8bef: {e}, \u91cd\u8bd5\u4e2d...\")\n                time.sleep(2)\n        return \"\u6545\u4e8b\u751f\u6210\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\"\n\ndef display_story(content: str):\n    \"\"\"\u7f8e\u5316\u6545\u4e8b\u663e\u793a\"\"\"\n    print(\"\\n\" + \"=\"*50)\n    print(f\"\ud83d\udcd6 \u7b2c{story_mgr.current_chapter}\u7ae0 \ud83d\udcd6\")\n    print(\"-\"*50)\n    print(content.replace(\". \", \".\\n\"))\n    print(\"=\"*50 + \"\\n\")\n\ndef main():\n    \"\"\"\u4e3b\u7a0b\u5e8f\u5165\u53e3\"\"\"\n    story_mgr = StoryManager()\n    ai_client = OpenAIClient()\n    \n    print(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\")\n    print(\"\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u6570\u5b57\uff09\u6216\u81ea\u7531\u8f93\u5165\uff0c\u8f93\u5165q\u9000\u51fa\\n\")\n    \n    user_input = None\n    while True:\n        # \u751f\u6210\u6545\u4e8b\u5185\u5bb9\n        messages = story_mgr.generate_story_prompt(user_input)\n        story_content = ai_client.generate_story(messages)\n        \n        # \u5904\u7406\u751f\u6210\u5931\u8d25\u7684\u60c5\u51b5\n        if \"\u5931\u8d25\" in story_content:\n            print(story_content)\n            break\n            \n        display_story(story_content)\n        \n        # \u8bb0\u5f55\u5386\u53f2\n        story_mgr.story_history.extend([\n            {\"role\": \"assistant\", \"content\": story_content},\n            {\"role\": \"user\", \"content\": user_input} if user_input else None\n        ])\n        \n        # \u83b7\u53d6\u7528\u6237\u8f93\u5165\n        choice = input(\"\u8bf7\u8f93\u5165\u4f60\u7684\u9009\u62e9\uff08\u8f93\u5165\u6570\u5b57\u6216\u81ea\u5b9a\u4e49\u5185\u5bb9\uff09\uff1a\").strip()\n        if choice.lower() == 'q':\n            print(\"\\n\u5192\u9669\u7ed3\u675f\uff0c\u671f\u5f85\u4e0b\u6b21\u518d\u89c1\uff01\")\n            break\n            \n        user_input = f\"\u7528\u6237\u9009\u62e9\uff1a{choice}\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u9009\u62e9\u7ee7\u7eed\u53d1\u5c55\u6545\u4e8b\uff0c\u4fdd\u6301\u8282\u594f\u7d27\u51d1\uff0c\u5e76\u6dfb\u52a0\u65b0\u7684\u51b2\u7a81\u548c\u5947\u9047\u3002\"\n        story_mgr.current_chapter += 1\n        \nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\n\u64cd\u4f5c\u5df2\u4e2d\u65ad\")\n        sys.exit(0)\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u6269\u5c55\u73b0\u6709\u529f\u80fd\uff0c\u6dfb\u52a0\u65b0\u7279\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n",
    "\u57fa\u4e8e\u4ee5\u4e0b\u73b0\u6709\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\uff1a\n\n\"\"\"\nOpenAI\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668 - \u4e13\u4e1a\u7248 v2.0\n\u6539\u8fdb\u5185\u5bb9\uff1a\n1. \u5b8c\u6574\u6e38\u620f\u5faa\u73af\u5b9e\u73b0\n2. \u589e\u5f3a\u578b\u6210\u5c31\u7cfb\u7edf\n3. \u5b89\u5168\u6587\u4ef6\u4fdd\u5b58\n4. \u591a\u8bed\u8a00\u652f\u6301\n5. \u70ed\u91cd\u8f7d\u914d\u7f6e\n\u4f9d\u8d56\uff1apip install openai python-dotenv termcolor filelock tenacity\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nfrom pathlib import Path\nfrom typing import List, Dict, Optional\nfrom termcolor import colored\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nfrom filelock import FileLock, Timeout\nfrom tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type\n\n# \u6dfb\u52a0\u7236\u76ee\u5f55\u5230\u7cfb\u7edf\u8def\u5f84\nsys.path.append(str(Path(__file__).parent.parent.parent.parent))\n\n# \u73b0\u5728\u53ef\u4ee5\u6b63\u786e\u5bfc\u5165\u914d\u7f6e\nfrom ai.config import (\n    API_CONFIG,\n    MODEL_CONFIG,\n    SYSTEM_PROMPTS,\n    DEV_CONFIG,\n    OUTPUT_CONFIG,\n    PathConfig\n)\n\nclass StoryGenerationError(Exception):\n    \"\"\"\u6545\u4e8b\u751f\u6210\u9519\u8bef\"\"\"\n    pass\n\nclass ConfigError(Exception):\n    \"\"\"\u914d\u7f6e\u9519\u8bef\"\"\"\n    pass\n\nclass UserConfig:\n    \"\"\"\u7528\u6237\u914d\u7f6e\u7ba1\u7406\"\"\"\n    def __init__(self):\n        self.config = self.load_or_init_config()\n        \n    def load_or_init_config(self) -> Dict:\n        \"\"\"\u52a0\u8f7d\u6216\u521d\u59cb\u5316\u914d\u7f6e\"\"\"\n        default_config = {\n            'language': 'zh-CN',\n            'auto_save': True,\n            'save_interval': 300,  # 5\u5206\u949f\n            'timeout': API_CONFIG['timeout'],\n            'model': MODEL_CONFIG['model']\n        }\n        \n        config_path = Path(\"config.json\")\n        if config_path.exists():\n            try:\n                with open(config_path, 'r', encoding='utf-8') as f:\n                    loaded_config = json.load(f)\n                    return {**default_config, **loaded_config}\n            except Exception as e:\n                print(colored(f\"\u52a0\u8f7d\u914d\u7f6e\u5931\u8d25: {e}\", 'yellow'))\n                \n        return default_config\n    \n    def reload_config(self):\n        \"\"\"\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\"\"\"\n        self.config = self.load_or_init_config()\n\nclass StoryManager:\n    \"\"\"\u6545\u4e8b\u7ba1\u7406\u5668\"\"\"\n    def __init__(self, config: UserConfig):\n        self.config = config\n        self.current_chapter = 0\n        self.story_history = []\n        self.decision_points = []\n        self.last_save_time = time.time()\n        self.achievements = {\n            'treasure_hunter': ('\u5bfb\u5b9d\u8fbe\u4eba', False),\n            'story_master': ('\u6545\u4e8b\u5927\u5e08', False)\n        }\n        self.achievement_progress = {\n            'treasure_hunter': {'current': 0, 'target': 5},\n            'story_master': {'current': 0, 'target': 10}\n        }\n        \n    def generate_story_prompt(self) -> str:\n        \"\"\"\u751f\u6210\u6545\u4e8b\u63d0\u793a\"\"\"\n        base_prompt = (\n            \"\u8bf7\u751f\u6210\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u573a\u666f\uff0c\u4e25\u683c\u6309\u7167\u4ee5\u4e0b\u683c\u5f0f\u8f93\u51fa\uff1a\\n\"\n            \"1. \u5148\u63cf\u8ff0\u573a\u666f\u548c\u60c5\u51b5\\n\"\n            '2. \u7a7a\u4e00\u884c\u540e\u5199\u4e0a\"\u9009\u9879\uff1a\"\\n'\n            \"3. \u7136\u540e\u6bcf\u884c\u5217\u51fa\u4e00\u4e2a\u9009\u9879\uff0c\u5171\u4e09\u4e2a\u9009\u9879\\n\\n\"\n            \"\u793a\u4f8b\u683c\u5f0f\uff1a\\n\"\n            \"\u4f60\u6765\u5230\u4e86\u4e00\u5ea7\u53e4\u8001\u7684\u5c71\u6d1e\u524d\uff0c\u6d1e\u53e3\u523b\u7740\u795e\u79d8\u7684\u7b26\u6587\u3002\u5c71\u6d1e\u5185\u4f20\u6765\u9635\u9635\u5bd2\u6c14\uff0c\u4f46\u4f3c\u4e4e\u8574\u542b\u7740\u5b9d\u7269\u7684\u6c14\u606f\u3002\\n\\n\"\n            \"\u9009\u9879\uff1a\\n\"\n            \"\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u8fdb\u5165\u5c71\u6d1e\u63a2\u7d22\\n\"\n            \"\u4f7f\u7528\u6cd5\u672f\u63a2\u6d4b\u5c71\u6d1e\u5185\u7684\u60c5\u51b5\\n\"\n            \"\u5728\u6d1e\u53e3\u7814\u7a76\u7b26\u6587\u7684\u542b\u4e49\\n\\n\"\n            f\"\u5f53\u524d\u7ae0\u8282\uff1a{self.current_chapter + 1}\\n\"\n        )\n        \n        if self.story_history:\n            base_prompt += f\"\\n\u524d\u60c5\u63d0\u8981\uff1a\\n{self.story_history[-1]}\\n\"\n            \n        return base_prompt\n    \n    def check_achievements(self) -> List[str]:\n        \"\"\"\u68c0\u67e5\u5e76\u89e3\u9501\u6210\u5c31\"\"\"\n        new_achievements = []\n        for ach_id, progress in self.achievement_progress.items():\n            if progress['current'] >= progress['target']:\n                if not self.achievements[ach_id][1]:\n                    self.achievements[ach_id] = (self.achievements[ach_id][0], True)\n                    new_achievements.append(ach_id)\n        return new_achievements\n\nclass StoryFormatter:\n    \"\"\"\u6545\u4e8b\u683c\u5f0f\u5316\u5668\"\"\"\n    @classmethod\n    def display_story(cls, content: str, chapter: int, config: UserConfig) -> List[str]:\n        \"\"\"\u663e\u793a\u6545\u4e8b\u5185\u5bb9\"\"\"\n        print(colored(f\"\\n\u7b2c {chapter + 1} \u7ae0\", 'cyan'))\n        print(\"=\" * 50)\n        \n        try:\n            # \u5206\u79bb\u6545\u4e8b\u5185\u5bb9\u548c\u9009\u9879\n            parts = content.split(\"\\n\u9009\u9879\uff1a\")\n            if len(parts) != 2:\n                raise StoryGenerationError(\"\u6545\u4e8b\u683c\u5f0f\u9519\u8bef\")\n                \n            story, options_text = parts\n            print(story.strip())\n            print(\"\\n\u9009\u9879\uff1a\")\n            \n            # \u89e3\u6790\u9009\u9879\n            options = []\n            for i, option in enumerate(options_text.strip().split(\"\\n\"), 1):\n                option = option.strip()\n                if option:  # \u53ea\u6dfb\u52a0\u975e\u7a7a\u9009\u9879\n                    print(colored(f\"{i}. {option}\", 'green'))\n                    options.append(option)\n            \n            # \u9a8c\u8bc1\u9009\u9879\u6570\u91cf\n            if len(options) < 3:\n                raise StoryGenerationError(\"\u9009\u9879\u6570\u91cf\u4e0d\u8db3\")\n                \n            return options\n            \n        except Exception as e:\n            raise StoryGenerationError(f\"\u663e\u793a\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n    \n    @classmethod\n    def display_achievement(cls, achievement: str, language: str):\n        \"\"\"\u663e\u793a\u6210\u5c31\"\"\"\n        ACHIEVEMENT_TEXTS = {\n            'treasure_hunter': {\n                'zh-CN': '\ud83c\udfc6 \u6210\u5c31\u89e3\u9501\uff1a\u5bfb\u5b9d\u8fbe\u4eba',\n                'en-US': '\ud83c\udfc6 Achievement Unlocked: Treasure Hunter'\n            },\n            'story_master': {\n                'zh-CN': '\ud83c\udfc6 \u6210\u5c31\u89e3\u9501\uff1a\u6545\u4e8b\u5927\u5e08',\n                'en-US': '\ud83c\udfc6 Achievement Unlocked: Story Master'\n            }\n        }\n        print(colored(ACHIEVEMENT_TEXTS[achievement][language], 'magenta'))\n\nclass GameEngine:\n    \"\"\"\u6e38\u620f\u5f15\u64ce\"\"\"\n    def __init__(self, api_key: str):\n        self.config = UserConfig()\n        self.story_manager = StoryManager(self.config)\n        self.client = OpenAI(\n            api_key=api_key,\n            base_url=API_CONFIG['base_url'],\n            timeout=API_CONFIG['timeout']\n        )\n        self.is_running = True\n        self.max_retries = API_CONFIG['max_retries']\n        self.retry_delay = API_CONFIG['retry_delay']\n        \n    @retry(\n        stop=stop_after_attempt(3),\n        wait=wait_exponential(multiplier=2, min=4, max=60),\n        retry=retry_if_exception_type(StoryGenerationError)\n    )\n    def generate_story(self, prompt: str) -> str:\n        \"\"\"\u751f\u6210\u6545\u4e8b\u5185\u5bb9\uff0c\u5e26\u6709\u81ea\u52a8\u91cd\u8bd5\u673a\u5236\"\"\"\n        try:\n            response = self.client.chat.completions.create(\n                model=MODEL_CONFIG['model'],\n                messages=[\n                    {\n                        \"role\": \"system\", \n                        \"content\": (\n                            \"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u7384\u5e7b\u5c0f\u8bf4\u4f5c\u5bb6\u3002\u8bf7\u4e25\u683c\u6309\u7167\u4ee5\u4e0b\u683c\u5f0f\u751f\u6210\u5185\u5bb9\uff1a\\n\"\n                            \"1. \u5148\u5199\u4e00\u6bb5\u751f\u52a8\u7684\u573a\u666f\u63cf\u8ff0\\n\"\n                            \"2. \u7a7a\u4e00\u884c\\n\"\n                            '3. \u5199\u4e0a\"\u9009\u9879\uff1a\"\\n'\n                            \"4. \u6bcf\u884c\u5199\u4e00\u4e2a\u9009\u9879\uff0c\u5171\u4e09\u4e2a\u9009\u9879\\n\\n\"\n                            \"\u793a\u4f8b\uff1a\\n\"\n                            \"\u6f06\u9ed1\u7684\u5c71\u6d1e\u524d\uff0c\u4e00\u9635\u5bd2\u98ce\u5439\u8fc7\u3002\u6d1e\u53e3\u7684\u7b26\u6587\u6563\u53d1\u7740\u5fae\u5f31\u7684\u5149\u8292\uff0c\u4f3c\u4e4e\u5728\u8bc9\u8bf4\u7740\u8fdc\u53e4\u7684\u79d8\u5bc6\u3002\\n\\n\"\n                            \"\u9009\u9879\uff1a\\n\"\n                            \"\u4ed4\u7ec6\u89c2\u5bdf\u7b26\u6587\u7684\u7eb9\u8def\\n\"\n                            \"\u5927\u80c6\u8e0f\u5165\u5c71\u6d1e\u63a2\u7d22\\n\"\n                            \"\u4f7f\u7528\u6cd5\u672f\u63a2\u6d4b\u6d1e\u5185\u60c5\u51b5\"\n                        )\n                    },\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                temperature=MODEL_CONFIG['temperature'],\n                max_tokens=MODEL_CONFIG['max_tokens'],\n                stream=MODEL_CONFIG['stream']\n            )\n            \n            story_content = []\n            if MODEL_CONFIG['stream']:\n                for chunk in response:\n                    if chunk.choices[0].delta.content:\n                        content = chunk.choices[0].delta.content\n                        story_content.append(content)\n                        print(content, end='', flush=True)\n                content = ''.join(story_content)\n            else:\n                content = response.choices[0].message.content\n\n            # \u683c\u5f0f\u9a8c\u8bc1\u548c\u4fee\u590d\n            return self._format_story_content(content)\n            \n        except Exception as e:\n            print(colored(f\"\\n\u26a0\ufe0f \u751f\u6210\u6545\u4e8b\u65f6\u51fa\u9519: {str(e)}\", 'yellow'))\n            raise StoryGenerationError(f\"\u751f\u6210\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n\n    def _format_story_content(self, content: str) -> str:\n        \"\"\"\u683c\u5f0f\u5316\u548c\u9a8c\u8bc1\u6545\u4e8b\u5185\u5bb9\"\"\"\n        try:\n            # \u8c03\u8bd5\u8f93\u51fa\n            if DEV_CONFIG.get('debug'):\n                print(\"\\nDebug - Raw content:\", repr(content))\n\n            # \u57fa\u672c\u683c\u5f0f\u68c0\u67e5\n            if not content or len(content.strip()) < 10:\n                raise StoryGenerationError(\"\u751f\u6210\u7684\u5185\u5bb9\u8fc7\u77ed\")\n\n            # \u89c4\u8303\u5316\u6362\u884c\u7b26\n            content = content.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n            \n            # \u5c1d\u8bd5\u591a\u79cd\u5206\u9694\u7b26\uff0c\u5305\u62ec\u5168\u89d2\u548c\u534a\u89d2\n            separators = [\"\u9009\u9879\uff1a\", \"\u9009\u9879:\", \"\\n\u9009\u9879\uff1a\", \"\\n\u9009\u9879:\", \"\u9009\u62e9\uff1a\", \"\u9009\u62e9:\"]\n            parts = None\n            \n            for sep in separators:\n                if sep in content:\n                    parts = content.split(sep, 1)  # \u53ea\u5206\u5272\u4e00\u6b21\n                    if len(parts) == 2:\n                        story = parts[0].strip()\n                        options = parts[1].strip()\n                        \n                        # \u5904\u7406\u9009\u9879\n                        option_lines = [line.strip() for line in options.split('\\n') if line.strip()]\n                        if len(option_lines) >= 3:\n                            return f\"{story}\\n\\n\u9009\u9879\uff1a\\n{option_lines[0]}\\n{option_lines[1]}\\n{option_lines[2]}\"\n            \n            # \u5982\u679c\u65e0\u6cd5\u6b63\u786e\u5206\u5272\uff0c\u629b\u51fa\u5f02\u5e38\n            raise StoryGenerationError(\"\u65e0\u6cd5\u8bc6\u522b\u6545\u4e8b\u683c\u5f0f\")\n            \n        except Exception as e:\n            if DEV_CONFIG.get('debug'):\n                print(\"\\nDebug - Error details:\", str(e))\n            raise StoryGenerationError(f\"\u683c\u5f0f\u5316\u6545\u4e8b\u5931\u8d25: {str(e)}\")\n\n    def main_loop(self):\n        \"\"\"\u4e3b\u6e38\u620f\u5faa\u73af\"\"\"\n        print(colored(\"\u6b22\u8fce\u6765\u5230\u7384\u5e7b\u5c0f\u8bf4\u5192\u9669\u751f\u6210\u5668\uff01\", 'cyan'))\n        \n        while self.is_running:\n            try:\n                # \u751f\u6210\u6545\u4e8b\n                prompt = self.story_manager.generate_story_prompt()\n                content = self.generate_story(prompt)\n                \n                # \u663e\u793a\u6545\u4e8b\n                options = StoryFormatter.display_story(\n                    content,\n                    self.story_manager.current_chapter,\n                    self.config\n                )\n                \n                # \u68c0\u67e5\u6210\u5c31\n                new_achs = self.story_manager.check_achievements()\n                for ach in new_achs:\n                    StoryFormatter.display_achievement(\n                        ach,\n                        self.config.config['language']\n                    )\n                \n                # \u83b7\u53d6\u7528\u6237\u9009\u62e9\n                choice = self.get_user_choice(options)\n                if choice == 0:  # \u9000\u51fa\n                    self.save_game()\n                    break\n                elif choice > 0:\n                    self.story_manager.story_history.append(content)\n                    self.story_manager.decision_points.append(choice - 1)\n                    self.story_manager.current_chapter += 1\n                    \n                # \u81ea\u52a8\u4fdd\u5b58\n                self.auto_save()\n                \n            except StoryGenerationError as e:\n                print(colored(f\"\\n\u274c \u9519\u8bef: {e}\", 'red'))\n                if not self.handle_error():\n                    break\n            except Exception as e:\n                print(colored(f\"\\n\u274c \u672a\u9884\u671f\u7684\u9519\u8bef: {e}\", 'red'))\n                if not self.handle_error():\n                    break\n    \n    def get_user_choice(self, options: List[str]) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u9009\u62e9\"\"\"\n        while True:\n            try:\n                choice = input(\"\\n\u8bf7\u9009\u62e9 (1-3\uff0c\u6216\u8f93\u5165 q \u9000\u51fa): \").strip().lower()\n                if choice == 'q':\n                    return 0\n                    \n                choice = int(choice)\n                if 1 <= choice <= len(options):\n                    return choice\n                    \n                print(colored(\"\u65e0\u6548\u7684\u9009\u62e9\uff0c\u8bf7\u91cd\u8bd5\", 'yellow'))\n            except ValueError:\n                print(colored(\"\u8bf7\u8f93\u5165\u6709\u6548\u7684\u6570\u5b57\", 'yellow'))\n    \n    def save_game(self):\n        \"\"\"\u4fdd\u5b58\u6e38\u620f\"\"\"\n        try:\n            save_data = {\n                \"chapter\": self.story_manager.current_chapter,\n                \"history\": self.story_manager.story_history,\n                \"decisions\": self.story_manager.decision_points,\n                \"achievements\": self.story_manager.achievements\n            }\n            \n            with FileLock(\"save.json.lock\", timeout=5):\n                with open(\"save.json\", 'w', encoding='utf-8') as f:\n                    json.dump(save_data, f, ensure_ascii=False, indent=2)\n                    \n            print(colored(\"\\n\u2705 \u6e38\u620f\u5df2\u4fdd\u5b58\", 'green'))\n            \n        except Exception as e:\n            print(colored(f\"\\n\u274c \u4fdd\u5b58\u5931\u8d25: {e}\", 'red'))\n    \n    def auto_save(self):\n        \"\"\"\u81ea\u52a8\u4fdd\u5b58\"\"\"\n        if (self.config.config['auto_save'] and \n            time.time() - self.story_manager.last_save_time > self.config.config['save_interval']):\n            self.save_game()\n            self.story_manager.last_save_time = time.time()\n    \n    def handle_error(self) -> bool:\n        \"\"\"\u5904\u7406\u9519\u8bef\u5e76\u8be2\u95ee\u662f\u5426\u91cd\u8bd5\"\"\"\n        try:\n            choice = input(\"\\n\u662f\u5426\u91cd\u8bd5\uff1f(y/n): \").strip().lower()\n            return choice == 'y'\n        except Exception:\n            return False\n\ndef main():\n    \"\"\"\u4e3b\u51fd\u6570\"\"\"\n    try:\n        # \u4f7f\u7528\u56fa\u5b9a\u7684API\u5bc6\u94a5\n        api_key = \"_yV91xd1MYtZvKbOl2NLWfZh8PR_tJfIBnJ9j7ZZbFQ\"\n        \n        # \u521d\u59cb\u5316\u6e38\u620f\u5f15\u64ce\n        engine = GameEngine(api_key)\n        engine.main_loop()\n        \n    except ConfigError as e:\n        print(colored(f\"\u914d\u7f6e\u9519\u8bef: {e}\", 'red'))\n        sys.exit(1)\n    except Exception as e:\n        print(colored(f\"\u672a\u9884\u671f\u7684\u9519\u8bef: {e}\", 'red'))\n        sys.exit(99)\n\nif __name__ == \"__main__\":\n    main()\n\n\u6539\u8fdb\u76ee\u6807\uff1a\u4f18\u5316\u4ee3\u7801\u7ed3\u6784\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\n\n\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u3002\n"
  ]
}