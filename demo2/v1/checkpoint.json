{
  "version": 1,
  "timestamp": 1740365684.3949938,
  "files": {
    "C:\\project\\python_project\\Va\\ai\\demo2\\v1\\main.py": {
      "content": "import os\nimport random\nimport asyncio\nfrom collections import deque\nfrom typing import Dict, List, Tuple, Optional, Deque\nfrom nicegui import ui\nfrom openai import OpenAI, APIError\n\nclass FantasyDialogueGenerator:\n    \"\"\"\n    \u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668\u6838\u5fc3\u7c7b\n    \n    \u914d\u7f6e\u53c2\u6570\uff1a\n    - MAX_HISTORY: \u6700\u5927\u5386\u53f2\u8bb0\u5f55\u6570\n    - MODEL_CONFIG: OpenAI\u6a21\u578b\u914d\u7f6e\n    - STYLE_CLASSES: UI\u6837\u5f0f\u7c7b\u914d\u7f6e\n    - SAMPLE_TEMPLATES: \u6a21\u62df\u5bf9\u8bdd\u6a21\u677f\n    \"\"\"\n    MAX_HISTORY = 10\n    MODEL_CONFIG = {\n        'model': 'gpt-3.5-turbo',\n        'temperature': 0.7,\n        'max_tokens': 500\n    }\n    STYLE_CLASSES = {\n        'header': 'bg-blue-100 p-4',\n        'title': 'text-2xl font-bold text-blue-800',\n        'input_container': 'w-full max-w-3xl mx-auto p-6',\n        'input_column': 'w-1/3 space-y-4',\n        'output_column': 'w-2/3 space-y-4',\n        'history_card': 'w-full p-4 bg-white shadow-sm'\n    }\n    SAMPLE_TEMPLATES = [\n        \"{c1}\uff1a\u300c{content}\u300d\\n{c2}\uff1a\uff08{action}\uff09\u300c{reply}\u300d\",\n        \"{c1}\uff08\u51b7\u7136\uff09\uff1a\u300c{content}\u300d\\n{c2}\u5fae\u5fae\u772f\u773c\uff1a\u300c{reply}\u300d\",\n        \"{c1}\u7ed3\u5370\u559d\u9053\uff1a\u300c{content}\u300d\\n{c2}\u638c\u4e2d{object}\u5149\u8292\u5927\u76db\uff1a\u300c{reply}\u300d\"\n    ]\n\n    def __init__(self):\n        self.history: Deque[Dict[str, str]] = deque(maxlen=self.MAX_HISTORY)\n        self.client = self._init_openai_client()\n        self.setup_ui()\n\n    def _init_openai_client(self):\n        \"\"\"\u521d\u59cb\u5316OpenAI\u5ba2\u6237\u7aef\"\"\"\n        if api_key := os.getenv('OPENAI_API_KEY'):\n            return OpenAI(api_key=api_key)\n        return None\n\n    def setup_ui(self) -> None:\n        \"\"\"\u521d\u59cb\u5316\u7528\u6237\u754c\u9762\u7ec4\u4ef6\"\"\"\n        with ui.header().classes(self.STYLE_CLASSES['header']):\n            ui.label('\u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668').classes(self.STYLE_CLASSES['title'])\n            \n        with ui.row().classes(self.STYLE_CLASSES['input_container']):\n            # \u8f93\u5165\u533a\u57df\n            with ui.column().classes(self.STYLE_CLASSES['input_column']):\n                self.role_input = ui.input('\u89d2\u8272\u8bbe\u5b9a\uff082-4\u4e2a\u89d2\u8272\uff0c\u7528\"\u4e0e\"\u5206\u9694\uff09',\n                                         placeholder='\u793a\u4f8b\uff1a\u4ed9\u5c0a\u4e0e\u9b54\u9053\u5723\u5973').classes('w-full')\n                self.context_input = ui.textarea('\u60c5\u5883\u8bbe\u5b9a\uff0850\u5b57\u4ee5\u5185\uff09',\n                                               placeholder='\u793a\u4f8b\uff1a\u5728\u4e5d\u5e7d\u79d8\u5883\u4e89\u593a\u4e0a\u53e4\u795e\u5668').classes('w-full h-32')\n                self.generate_btn = ui.button('\u751f\u6210\u5bf9\u8bdd', on_click=self.generate_dialogue).classes('w-full')\n                \n            # \u8f93\u51fa\u533a\u57df\n            with ui.column().classes(self.STYLE_CLASSES['output_column']):\n                self.loading = ui.spinner(size='lg', color='blue').bind_visibility_from(self, 'loading')\n                self.dialogue_output = ui.markdown().classes('p-4 bg-gray-50 rounded-lg min-h-48')\n                self.error_message = ui.label().classes('text-red-500').bind_visibility_from(self, 'error_message')\n                \n                # \u5386\u53f2\u8bb0\u5f55\n                ui.label('\u6700\u8fd1\u751f\u6210').classes('text-xl font-semibold mt-4')\n                self.history_container = ui.column().classes('space-y-4')\n\n    async def generate_dialogue(self) -> None:\n        \"\"\"\u751f\u6210\u5bf9\u8bdd\u7684\u6838\u5fc3\u903b\u8f91\"\"\"\n        try:\n            self._validate_inputs()\n            self._set_loading_state(True)\n            \n            prompt = self._build_prompt()\n            response = await self._call_llm(prompt)\n            \n            self._add_to_history(response)\n            self._update_display(response)\n            \n        except ValueError as ve:\n            self.error_message = f\"\u8f93\u5165\u9519\u8bef: {str(ve)}\"\n        except APIError as api_err:\n            self.error_message = f\"\u63a5\u53e3\u8bf7\u6c42\u5931\u8d25: {api_err.message.split('(')[0]}\"\n        except Exception as e:\n            self.error_message = f\"\u7cfb\u7edf\u9519\u8bef: {str(e)}\"\n        finally:\n            self._set_loading_state(False)\n\n    def _validate_inputs(self) -> None:\n        \"\"\"\u589e\u5f3a\u8f93\u5165\u9a8c\u8bc1\"\"\"\n        role = self.role_input.value.strip()\n        context = self.context_input.value.strip()\n        \n        if not role:\n            raise ValueError(\"\u5fc5\u987b\u586b\u5199\u89d2\u8272\u8bbe\u5b9a\")\n        if '\u4e0e' not in role or len(role.split('\u4e0e')) < 2:\n            raise ValueError(\"\u89d2\u8272\u8bbe\u5b9a\u9700\u5305\u542b\u81f3\u5c11\u4e24\u4e2a\u89d2\u8272\uff0c\u7528'\u4e0e'\u5206\u9694\")\n        if len(role) > 100:\n            raise ValueError(\"\u89d2\u8272\u8bbe\u5b9a\u4e0d\u5f97\u8d85\u8fc7100\u5b57\")\n        if not context:\n            raise ValueError(\"\u5fc5\u987b\u586b\u5199\u60c5\u5883\u8bbe\u5b9a\")\n        if len(context) > 500:\n            raise ValueError(\"\u60c5\u5883\u8bbe\u5b9a\u4e0d\u5f97\u8d85\u8fc7500\u5b57\")\n\n    def _build_prompt(self) -> str:\n        \"\"\"\u6784\u5efaLLM\u63d0\u793a\u8bcd\"\"\"\n        return f\"\"\"\n        \u8bf7\u751f\u6210\u4e00\u6bb5\u7b26\u5408\u4e2d\u56fd\u7384\u5e7b\u5c0f\u8bf4\u98ce\u683c\u7684\u5bf9\u8bdd\u3002\u8981\u6c42\uff1a\n        1. \u89d2\u8272\uff1a{self.role_input.value}\n        2. \u60c5\u5883\uff1a{self.context_input.value}\n        3. \u5305\u542b5-7\u8f6e\u81ea\u7136\u5bf9\u8bdd\n        4. \u4f7f\u7528\u6070\u5f53\u7684\u6587\u8a00\u6587\u4e0e\u73b0\u4ee3\u6c49\u8bed\u7ed3\u5408\u7684\u8868\u8fbe\u65b9\u5f0f\n        5. \u6bcf\u6bb5\u5bf9\u8bdd\u524d\u7528\u89d2\u8272\u540d\u79f0\u6807\u6ce8\uff0c\u683c\u5f0f\u793a\u4f8b\uff1a\n           \u89d2\u8272A\uff1a\u300c\u5bf9\u8bdd\u5185\u5bb9\u300d\n           \u89d2\u8272B\uff1a\uff08\u52a8\u4f5c\u63cf\u5199\uff09\u300c\u5bf9\u8bdd\u5185\u5bb9\u300d\n        \"\"\"\n\n    async def _call_llm(self, prompt: str) -> str:\n        \"\"\"\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u5185\u5bb9\"\"\"\n        if self.client:\n            response = self.client.chat.completions.create(\n                messages=[{\"role\": \"user\", \"content\": prompt}],\n                **self.MODEL_CONFIG\n            )\n            return response.choices[0].message.content\n        else:\n            await asyncio.sleep(1)  # \u6a21\u62df\u7f51\u7edc\u5ef6\u8fdf\n            return self._generate_sample_dialogue()\n\n    def _generate_sample_dialogue(self) -> str:\n        \"\"\"\u589e\u5f3a\u6a21\u62df\u5bf9\u8bdd\u751f\u6210\"\"\"\n        characters = self.role_input.value.split('\u4e0e')\n        if len(characters) < 2:\n            characters = ['\u4ed9\u5c0a', '\u9b54\u5c0a']\n            \n        template = random.choice(self.SAMPLE_TEMPLATES)\n        elements = {\n            'c1': characters[0].strip(),\n            'c2': characters[1].strip(),\n            'content': random.choice(['\u6b64\u7269\u4e43\u6211\u5b97\u95e8\u81f3\u5b9d', '\u9601\u4e0b\u672a\u514d\u592a\u8fc7\u72c2\u5984', '\u5929\u5730\u7075\u7269\u5c82\u5bb9\u5c14\u7b49\u73b7\u6c61']),\n            'action': random.choice(['\u51b7\u7b11', '\u62c2\u8896', '\u5251\u6307\u865a\u7a7a']),\n            'reply': random.choice(['\u6709\u80fd\u8005\u5c45\u4e4b', '\u4eca\u65e5\u4fbf\u8981\u8e0f\u5e73\u6b64\u5c71', '\u4e14\u770b\u4f60\u80fd\u5948\u6211\u4f55']),\n            'object': random.choice(['\u6cd5\u5b9d', '\u7075\u5251', '\u7b26\u5492'])\n        }\n        return template.format(**elements).replace('\\n', '\\n\\n')\n\n    def _add_to_history(self, content: str) -> None:\n        \"\"\"\u6dfb\u52a0\u8bb0\u5f55\u5230\u5386\u53f2\"\"\"\n        self.history.appendleft({\n            'role': self.role_input.value,\n            'context': self.context_input.value,\n            'content': content\n        })\n        self._update_history_display()\n\n    def _update_history_display(self) -> None:\n        \"\"\"\u4f18\u5316\u5386\u53f2\u8bb0\u5f55\u663e\u793a\"\"\"\n        self.history_container.clear()\n        for item in self.history:\n            with ui.card().classes(self.STYLE_CLASSES['history_card']):\n                ui.label(f\"\u89d2\u8272\uff1a{item['role']}\").classes('font-medium')\n                ui.label(f\"\u60c5\u5883\uff1a{item['context'][:30]}...\").classes('text-sm text-gray-600')\n                ui.markdown(item['content']).classes('mt-2')\n\n    def _update_display(self, content: str) -> None:\n        \"\"\"\u66f4\u65b0\u4e3b\u663e\u793a\u533a\u57df\"\"\"\n        self.dialogue_output.content = content\n        self.error_message = None\n\n    def _set_loading_state(self, state: bool) -> None:\n        \"\"\"\u63a7\u5236\u52a0\u8f7d\u72b6\u6001\"\"\"\n        self.generate_btn.disable = state\n        self.loading.visible = state\n\nif __name__ in {\"__main__\", \"__mp_main__\"}:\n    app = FantasyDialogueGenerator()\n    ui.run(\n        title=\"\u7384\u5e7b\u5bf9\u8bdd\u751f\u6210\u5668\",\n        reload=False,\n        port=8080,\n        favicon=\"\u2728\",\n        dark=False\n    )",
      "hash": "cac90a895d3ba458862cd3325b6e65db"
    }
  },
  "history": [],
  "user_feedback": [
    "\u7528nicegui\u5199\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668"
  ]
}