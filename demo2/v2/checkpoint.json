{
  "version": 2,
  "timestamp": 1740365980.0000138,
  "files": {
    "C:\\project\\python_project\\Va\\ai\\demo2\\v2\\main.py": {
      "content": "import os\nimport random\nimport re\nimport asyncio\nfrom datetime import datetime\nfrom collections import deque\nfrom typing import Dict, List, Deque\nfrom nicegui import ui\nfrom openai import AsyncOpenAI, APIError, APITimeoutError\nfrom tenacity import retry, stop_after_attempt, wait_random_exponential, retry_if_exception_type\n\nclass FantasyDialogueGenerator:\n    \"\"\"\n    \u589e\u5f3a\u7248\u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668\n    \u65b0\u589e\u529f\u80fd\uff1a\u591a\u5206\u9694\u7b26\u652f\u6301\u3001\u6a21\u677f\u5f15\u64ce\u4f18\u5316\u3001API\u91cd\u8bd5\u673a\u5236\u3001\u5b9e\u65f6\u8f93\u5165\u6821\u9a8c\n    \"\"\"\n    MAX_HISTORY = 10\n    MODEL_CONFIG = {\n        'model': 'gpt-3.5-turbo',\n        'temperature': 0.75,\n        'max_tokens': 600,\n        'timeout': 15\n    }\n    ROLE_SEPARATORS = re.compile(r'[\u4e0e\u548c\u53ca\u3001]+')\n    STYLE_CLASSES = {\n        'header': 'bg-gradient-to-r from-blue-800 to-purple-800 p-4 shadow-lg',\n        'title': 'text-3xl font-bold text-white text-center',\n        'input_container': 'w-full max-w-5xl mx-auto p-4 lg:p-6',\n        'input_column': 'w-full lg:w-1/3 space-y-4',\n        'output_column': 'w-full lg:w-2/3 space-y-4 mt-6 lg:mt-0',\n        'history_card': 'w-full p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow'\n    }\n\n    def __init__(self):\n        self.history: Deque[Dict] = deque(maxlen=self.MAX_HISTORY)\n        self.client = self._init_openai_client()\n        self._setup_observers()\n        self.setup_ui()\n\n    def _init_openai_client(self):\n        \"\"\"\u521d\u59cb\u5316\u5f02\u6b65OpenAI\u5ba2\u6237\u7aef\"\"\"\n        if api_key := os.getenv('OPENAI_API_KEY'):\n            return AsyncOpenAI(api_key=api_key)\n        return None\n\n    def _setup_observers(self):\n        \"\"\"\u8bbe\u7f6e\u8f93\u5165\u5b9e\u65f6\u6821\u9a8c\"\"\"\n        self._last_valid_roles = []\n        self._last_valid_context = ''\n\n    def setup_ui(self) -> None:\n        \"\"\"\u589e\u5f3a\u54cd\u5e94\u5f0fUI\u5e03\u5c40\"\"\"\n        with ui.header().classes(self.STYLE_CLASSES['header']):\n            ui.label('\ud83c\udfad \u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668').classes(self.STYLE_CLASSES['title'])\n            \n        with ui.row().classes(self.STYLE_CLASSES['input_container']):\n            with ui.column().classes(self.STYLE_CLASSES['input_column']):\n                # \u89d2\u8272\u8f93\u5165\u589e\u5f3a\n                with ui.input('\u89d2\u8272\u8bbe\u5b9a\uff082-4\u4e2a\u89d2\u8272\uff09', placeholder='\u793a\u4f8b\uff1a\u4ed9\u5c0a \u4e0e \u9b54\u9053\u5723\u5973').classes('w-full') as self.role_input:\n                    ui.tooltip('\u652f\u6301\u5206\u9694\u7b26\uff1a\u4e0e\u3001\u548c\u3001\u53ca\u3001\u987f\u53f7').classes('text-sm')\n                    ui.badge('', color='red').bind_text_from(self, 'role_status').classes('ml-2')\n                self.role_input.validation = {'\u5206\u9694\u7b26': lambda v: len(self._parse_roles(v)) >= 2}\n                self.role_status = ''\n\n                # \u60c5\u5883\u8f93\u5165\u589e\u5f3a\n                with ui.textarea('\u60c5\u5883\u8bbe\u5b9a').classes('w-full h-40') as self.context_input:\n                    with ui.row().classes('w-full justify-between items-center text-sm'):\n                        ui.badge('0/500', color='blue').bind_text_from(\n                            self.context_input, 'value', \n                            backward=lambda v: f\"{len(v)}/500\"\n                        )\n                        ui.badge('', color='red').bind_text_from(self, 'context_status')\n                self.context_input.validation = {'\u5fc5\u586b': lambda v: bool(v.strip())}\n                self.context_status = ''\n\n                # \u751f\u6210\u6309\u94ae\u589e\u5f3a\n                self.generate_btn = ui.button('\u751f\u6210\u5bf9\u8bdd', on_click=self.generate_dialogue).classes('w-full')\n                ui.linear_progress(0).bind_visibility_from(self, 'loading').props('instant-feedback')\n\n            with ui.column().classes(self.STYLE_CLASSES['output_column']):\n                self.dialogue_output = ui.markdown().classes('p-4 bg-gray-50 rounded-lg min-h-48')\n                self.error_display = ui.label().classes('text-red-500 italic')\n                \n                # \u589e\u5f3a\u5386\u53f2\u8bb0\u5f55\n                with ui.expansion('\u5386\u53f2\u8bb0\u5f55', icon='history').classes('w-full'):\n                    self.history_container = ui.column().classes('space-y-4')\n\n    def _parse_roles(self, value: str) -> List[str]:\n        \"\"\"\u89e3\u6790\u591a\u79cd\u5206\u9694\u7b26\u7684\u89d2\u8272\u8bbe\u5b9a\"\"\"\n        return [r.strip() for r in self.ROLE_SEPARATORS.split(value) if r.strip()]\n\n    async def generate_dialogue(self) -> None:\n        \"\"\"\u589e\u5f3a\u751f\u6210\u903b\u8f91\"\"\"\n        try:\n            self._validate_inputs()\n            self._set_loading(True)\n            \n            prompt = self._build_system_prompt()\n            response = await self._call_llm_with_retry(prompt)\n            \n            self._add_history(response)\n            self._show_output(response)\n            \n        except Exception as e:\n            self._handle_error(e)\n        finally:\n            self._set_loading(False)\n\n    def _validate_inputs(self) -> None:\n        \"\"\"\u589e\u5f3a\u5b9e\u65f6\u6821\u9a8c\u903b\u8f91\"\"\"\n        roles = self._parse_roles(self.role_input.value)\n        context = self.context_input.value.strip()\n        \n        if len(roles) < 2:\n            raise ValueError('\u81f3\u5c11\u9700\u89812\u4e2a\u89d2\u8272')\n        if len(roles) > 4:\n            raise ValueError('\u6700\u591a\u652f\u63014\u4e2a\u89d2\u8272')\n        if not context:\n            raise ValueError('\u60c5\u5883\u8bbe\u5b9a\u4e0d\u80fd\u4e3a\u7a7a')\n        if len(context) > 500:\n            raise ValueError('\u60c5\u5883\u8bbe\u5b9a\u8d85\u8fc7500\u5b57')\n\n    def _build_system_prompt(self) -> str:\n        \"\"\"\u6784\u5efa\u5e26\u793a\u4f8b\u7684\u7cfb\u7edf\u63d0\u793a\u8bcd\"\"\"\n        roles = self._parse_roles(self.role_input.value)\n        example = \"\"\"\n        \u3010\u793a\u4f8b\u683c\u5f0f\u3011\n        \u51cc\u6e0a\u4ed9\u5c0a\uff1a\u300c\u6b64\u9635\u4e43\u4e0a\u53e4\u4f20\u627f\uff0c\u5c14\u7b49\u5c82\u80fd\u5984\u7834\uff01\u300d\n        \u8d64\u7130\u9b54\u541b\uff08\u5468\u8eab\u715e\u6c14\u7ffb\u6d8c\uff09\uff1a\u300c\u54c8\u54c8\u54c8\uff0c\u672c\u5ea7\u504f\u8981\u9006\u5929\u800c\u884c\uff01\u300d\uff08\u6325\u52a8\u4e07\u9b42\u5e61\uff09\n        \u6e05\u7476\u4ed9\u5b50\uff1a\u7d20\u624b\u7ed3\u5370\uff0c\u4e5d\u9704\u73af\u4f69\u53d1\u51fa\u6e05\u9e23\uff1a\u300c\u9053\u53cb\u901f\u9000\uff0c\u6b64\u9635\u51f6\u9669\u5f02\u5e38\uff01\u300d\n        \"\"\"\n        return f\"\"\"\n        \u4f60\u662f\u4e00\u4f4d\u8d44\u6df1\u7384\u5e7b\u5c0f\u8bf4\u4f5c\u5bb6\uff0c\u8bf7\u6839\u636e\u4ee5\u4e0b\u8bbe\u5b9a\u751f\u6210\u5bf9\u8bdd\uff1a\n        - \u89d2\u8272\uff1a{\", \".join(roles)}\n        - \u60c5\u5883\uff1a{self.context_input.value}\n        \n        \u8981\u6c42\uff1a\n        1. 5-7\u8f6e\u5bf9\u8bdd\uff0c\u4fdd\u6301\u8282\u594f\u7d27\u51d1\n        2. \u5408\u7406\u5206\u914d\u89d2\u8272\u53f0\u8bcd\uff0c\u907f\u514d\u5355\u89d2\u8272\u72ec\u767d\n        3. \u4f7f\u7528\u7384\u5e7b\u7279\u6709\u8bcd\u6c47\uff08\u5982\uff1a\u771f\u5143\u3001\u7ed3\u5370\u3001\u6cd5\u5b9d\uff09\n        4. \u5bf9\u8bdd\u683c\u5f0f\uff1a\u89d2\u8272\u540d\uff08\u53ef\u9009\u52a8\u4f5c\uff09\uff1a\u300c\u5185\u5bb9\u300d\n        5. \u9002\u5f53\u6dfb\u52a0\u573a\u666f\u63cf\u5199\uff08\u7528\u62ec\u53f7\u6807\u6ce8\uff09\n        \n        {example}\n        \"\"\"\n\n    @retry(stop=stop_after_attempt(3),\n           wait=wait_random_exponential(multiplier=1, max=10),\n           retry=retry_if_exception_type((APIError, APITimeoutError)))\n    async def _call_llm_with_retry(self, prompt: str) -> str:\n        \"\"\"\u5e26\u91cd\u8bd5\u673a\u5236\u7684API\u8c03\u7528\"\"\"\n        try:\n            if self.client:\n                response = await asyncio.wait_for(\n                    self.client.chat.completions.create(\n                        messages=[{\n                            \"role\": \"system\",\n                            \"content\": \"\u4f60\u662f\u4e00\u4f4d\u7cbe\u901a\u4e2d\u56fd\u7384\u5e7b\u5c0f\u8bf4\u521b\u4f5c\u7684\u4f5c\u5bb6\",\n                        }, {\n                            \"role\": \"user\", \n                            \"content\": prompt\n                        }],\n                        **self.MODEL_CONFIG\n                    ),\n                    timeout=self.MODEL_CONFIG['timeout']\n                )\n                return response.choices[0].message.content\n            return self._generate_enhanced_sample()\n        except APITimeoutError:\n            return \"\u8bf7\u6c42\u8d85\u65f6\uff0c\u5df2\u542f\u7528\u6a21\u62df\u5bf9\u8bdd...\"\n\n    def _generate_enhanced_sample(self) -> str:\n        \"\"\"\u591a\u89d2\u8272\u6a21\u62df\u5bf9\u8bdd\u751f\u6210\"\"\"\n        roles = self._parse_roles(self.role_input.value)\n        templates = [\n            lambda c: f\"{c}\u300c{random.choice(['\u54fc\uff0c\u96d5\u866b\u5c0f\u6280\uff01','\u5c14\u7b49\u7adf\u6562\uff01','\u5929\u5730\u65e0\u6781\uff0c\u4e7e\u5764\u501f\u6cd5\uff01'])}\u300d\",\n            lambda c: f\"{c}\uff08{random.choice(['\u5251\u6307\u82cd\u7a79','\u796d\u51fa\u6cd5\u5b9d','\u5410\u51fa\u4e00\u53e3\u7cbe\u8840'])}\uff09\u300c{random.choice(['\u770b\u62db\uff01','\u7834\uff01','\u9053\u53cb\u5c0f\u5fc3\uff01'])}\u300d\"\n        ]\n        return '\\n\\n'.join(\n            f\"{random.choice(templates)(role)}\" \n            for _ in range(random.randint(5,7)) \n            for role in random.sample(roles, k=2)\n        )\n\n    def _add_history(self, content: str) -> None:\n        \"\"\"\u589e\u91cf\u66f4\u65b0\u5386\u53f2\u8bb0\u5f55\"\"\"\n        record = {\n            'time': datetime.now().strftime('%H:%M'),\n            'roles': self._parse_roles(self.role_input.value),\n            'context': self.context_input.value,\n            'content': content\n        }\n        self.history.appendleft(record)\n        \n        # \u4ec5\u6dfb\u52a0\u65b0\u6761\u76ee\n        with self.history_container:\n            with ui.card().classes(self.STYLE_CLASSES['history_card']):\n                ui.label(f\"\u23f0 {record['time']} | \u89d2\u8272\uff1a{'\u3001'.join(record['roles'])}\").classes('text-sm')\n                ui.markdown(f\"**\u60c5\u5883**\uff1a{record['context'][:35]}...\").classes('text-gray-600')\n                ui.separator().classes('my-2')\n                ui.markdown(record['content']).classes('text-sm')\n                ui.button(icon='content_copy', on_click=lambda: ui.notify('\u5df2\u590d\u5236')).props('dense flat')\n\n    def _show_output(self, content: str) -> None:\n        \"\"\"\u663e\u793a\u8f93\u51fa\u5e76\u6eda\u52a8\u5230\u7ed3\u679c\"\"\"\n        self.dialogue_output.content = content\n        self.error_display.text = None\n        ui.run_javascript('window.scrollTo(0, document.documentElement.scrollHeight || document.body.scrollHeight);')\n\n    def _set_loading(self, state: bool) -> None:\n        \"\"\"\u4f18\u5316\u52a0\u8f7d\u72b6\u6001\u7ba1\u7406\"\"\"\n        self.loading = state\n        self.generate_btn.disable = state\n        ui.update()\n\n    def _handle_error(self, error: Exception) -> None:\n        \"\"\"\u589e\u5f3a\u9519\u8bef\u5904\u7406\"\"\"\n        error_msg = {\n            ValueError: lambda e: f\"\u8f93\u5165\u9519\u8bef\uff1a{str(e)}\",\n            APIError: lambda e: f\"API\u9519\u8bef\uff1a{e.message.split('(')[0]}\",\n            APITimeoutError: lambda _: \"\u8bf7\u6c42\u8d85\u65f6\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\"\n        }.get(type(error), lambda e: f\"\u7cfb\u7edf\u9519\u8bef\uff1a{str(e)}\")(error)\n        \n        self.error_display.text = error_msg\n        ui.notify(error_msg, type='negative', position='top-right')\n\nif __name__ == \"__main__\":\n    app = FantasyDialogueGenerator()\n    ui.run(\n        title=\"\u7384\u5e7b\u5bf9\u8bdd\u751f\u6210\u5668\",\n        reload=False,\n        port=8080,\n        favicon=\"\u2694\ufe0f\",\n        dark=True,\n        tailwind=True\n    )",
      "hash": "492648826998a3b74acd20cf14dc9601"
    }
  },
  "history": [],
  "user_feedback": [
    "\u7528nicegui\u5199\u4e00\u4e2a\u7384\u5e7b\u5c0f\u8bf4\u5bf9\u8bdd\u751f\u6210\u5668"
  ]
}